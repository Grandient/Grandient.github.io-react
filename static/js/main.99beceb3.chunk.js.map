{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Password","styled","Input","props","lightMode","Score","Progress","className","percent","indicating","addBodyClass","useEffect","document","body","classList","add","remove","GuessMessage","Message","color","OptionMessage","Guess","guesses","Options","hook","style","boxShadow","display","onClick","Time","ListMessage","verySlow","slow","fast","veryFast","Warning","SuggestionMessage","AtlasMessage","Atlas","Pattern","pattern","token","Suggestion","undefined","App","useState","password","setPassword","setLightMode","selected","setSelected","issues","zxcvbn","textStyle","id","onChange","e","target","value","placeholder","score","feedback","suggestions","map","issue","key","warning","crack_times_display","online_throttling_100_per_hour","online_no_throttling_10_per_second","offline_slow_hashing_1e4_per_second","offline_fast_hashing_1e10_per_second","sequence","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99beceb3.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport zxcvbn from 'zxcvbn';\nimport './App.css';\nimport { Input, Message, Progress } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport styled from 'styled-components';\n\n\nfunction App() {\n  let [password, setPassword] = useState(\"\")\n  let [lightMode, setLightMode] = useState(false);\n  let [selected, setSelected] = useState(\"\");\n  let [showInfo, setShowInfo] = useState(false);\n  let issues = zxcvbn(password);\n  let bodyStyle = null;\n  let textStyle = null;\n\n  if(lightMode){\n    textStyle = {color: \"black\"}\n    addBodyClass(\"light\")()\n  } else {\n    textStyle = {color: \"white\"}\n    addBodyClass(\"dark\")()\n  }\n\n  return (\n    <div className=\"center\">\n      <div style={textStyle} className=\"title\">HOW STRONG IS YOUR PASSWORD?</div>\n      <Password lightMode={lightMode} style={textStyle} id=\"password\" onChange={(e) => setPassword(e.target.value)} value={password} placeholder=\"ENTER PASSWORD\"/>\n      <Score percent={issues.score}/>\n      <Guess guesses={issues.guesses} hook={setLightMode} lightMode={lightMode}/>\n      <Atlas lightMode={lightMode} hook={setSelected}/>\n      <ListMessage lightMode={lightMode}>\n        {issues.feedback.suggestions != \"\" && (selected == \"\" || selected == \"Suggestion\") ? issues.feedback.suggestions.map((issue, key) => (\n          <Suggestion lightMode={lightMode} key={key} body={issue}/>\n        )) : null}\n        {issues.feedback.warning != \"\" && (selected == \"\" || selected == \"Warning\") ? <Warning lightMode={lightMode} body={issues.feedback.warning}/> : null}\n        {(selected == \"\" || selected == \"Time\") ? \n          <Time lightMode={lightMode} verySlow={issues.crack_times_display.online_throttling_100_per_hour} \n              slow={issues.crack_times_display.online_no_throttling_10_per_second} \n              fast={issues.crack_times_display.offline_slow_hashing_1e4_per_second}\n              veryFast={issues.crack_times_display.offline_fast_hashing_1e10_per_second}/> \n          : null}\n        {(selected == \"\" || selected == \"Pattern\") ?\n          <div className=\"times\">\n            {issues.sequence.map((pattern, key) => (\n              <Pattern lightMode={lightMode} pattern={pattern} key={key}/>\n            ))} \n          </div> \n          : null}\n      </ListMessage>\n    </div>\n  );\n}\n\nexport const Password = styled(Input)`\n  input {\n    color: ${props => props.lightMode ? \"black !important\" : \"white !important\"};\n  }\n`;\n\nfunction Score(props){\n  return (\n    <Progress className=\"score\" percent={((props.percent+1)/5)*100} indicating/>\n  )\n}\n\nexport function addBodyClass(className) {\n  return () => useEffect(() => {\n    document.body.classList.add(className);\n    return () => { document.body.classList.remove(className); }\n  });\n}\n\nexport const GuessMessage = styled(Message)`\n  text-align: center;\n  width: 20vw;\n  margin: 0 auto !important;\n  margin-bottom: 2vh !important;\n  background: ${props => props.lightMode ? props.color : 'rgba(255, 255, 255, 0.05) !important'};\n`;\n\nexport const OptionMessage = styled(Message)`\n  text-align: center;\n  width: 7.5vw;\n  margin: auto 0.2vw !important;\n  margin-bottom: 2vh !important;\n  background: ${props => props.lightMode ? props.color : 'rgba(255, 255, 255, 0.05) !important'};\n  color: ${props => props.color == \"white\" ? \"black\" : \"auto\"};\n  cursor: pointer;\n`;\n\nfunction Guess(props){\n  return (\n    <div className=\"options\">\n      <GuessMessage lightMode={props.lightMode} color=\"purple\">FOUND IN {props.guesses} GUESSES!</GuessMessage>\n      <Options lightMode={props.lightMode} hook={props.hook}/>\n    </div>\n  )\n}\n\nfunction Options(props){\n    let style = null;\n  if(!props.lightMode){\n    style={boxShadow: \"0 0 0 1px white inset, 0 0 0 0 transparent\", color: \"white\"}\n  }\n  return (\n    <div style={{display:\"flex\"}}>\n      <OptionMessage lightMode={props.lightMode} color=\"teal\" className=\"info\">Info</OptionMessage>\n      <OptionMessage lightMode={props.lightMode} onClick={() => props.hook(!props.lightMode)} className=\"info\" style={style}>Lights On!</OptionMessage>\n    </div>\n  )\n}\n\nfunction Time(props){\n  return (\n    <div className=\"times\">\n      <ListMessage lightMode={props.lightMode} color=\"blue\" className=\"time\">Very Slow: {props.verySlow} (100 Attempts per hour)</ListMessage>\n      <ListMessage lightMode={props.lightMode} color=\"blue\" className=\"time\">Slow: {props.slow} (10 Attempts per second)</ListMessage>\n      <ListMessage lightMode={props.lightMode} color=\"blue\" className=\"time\">Fast: {props.fast} (1000 Attempts per second)</ListMessage>\n      <ListMessage lightMode={props.lightMode} color=\"blue\" className=\"time\">Very Fast: {props.veryFast} (1 Billion Attempts per second)</ListMessage>\n    </div>\n  )\n}\n\nfunction Warning(props){\n  return (\n    <SuggestionMessage lightMode={props.lightMode} color=\"red\" className=\"warning\">\n      {props.body}\n    </SuggestionMessage>\n  )\n}\n\nexport const AtlasMessage = styled(Message)`\n  width: 6vw;\n  margin: 0 2vw !important;  \n  background: ${props => props.lightMode ? null : 'rgba(255, 255, 255, 0.05) !important'};\n  cursor: pointer;\n  @media (max-width: 1242px) {\n    margin: 0 1vw !important;\n    width: 9vw;\n  }\n\n  @media (max-width: 968px) {\n    margin: 0 0.5vw !important;\n    width: 11vw;\n  }\n\n  @media (max-width: 816px) {\n    margin: 0 !important;\n    padding: 0.5em !important;\n  }\n\n  @media (max-width: 676px) {\n    margin: 0 !important;\n    padding: 0em !important;\n  }\n`;\n\nexport const ListMessage = styled(Message)`\n  margin: 2vh auto !important;\n  background: ${props => props.lightMode ? 'white' : 'rgba(255, 255, 255, 0.05) !important'};\n`;\n\nfunction Atlas(props){\n  let style = null;\n  if(!props.lightMode){\n    style={boxShadow: \"0 0 0 1px white inset, 0 0 0 0 transparent\", color: \"white\"}\n  }\n  return (\n    <div className=\"atlas\">\n      <AtlasMessage lightMode={props.lightMode} onClick={() => props.hook(\"Warning\")} color=\"red\" >Warning</AtlasMessage>\n      <AtlasMessage lightMode={props.lightMode} onClick={() => props.hook(\"Suggestion\")} color=\"yellow\">Suggestions</AtlasMessage>\n      <AtlasMessage lightMode={props.lightMode} onClick={() => props.hook(\"\")} style={style}>All</AtlasMessage>\n      <AtlasMessage lightMode={props.lightMode} onClick={() => props.hook(\"Pattern\")} color=\"green\">Patterns</AtlasMessage>\n      <AtlasMessage lightMode={props.lightMode} onClick={() => props.hook(\"Time\")} color=\"blue\">Times</AtlasMessage>\n    </div>\n  )\n}\n\nexport const SuggestionMessage = styled(Message)`\n  margin: 1vh auto !important;\n  background: ${props => props.lightMode ? 'white' : 'rgba(255, 255, 255, 0.05) !important'};\n`\n\nfunction Pattern(props){\n  return (\n    <ListMessage lightMode={props.lightMode} color=\"green\" className=\"pattern\">\n      <div>TOKEN: {props.pattern.token}</div>\n      <div>PATTERN: {props.pattern.pattern}</div>\n      {props.pattern.pattern == \"dictionary\" ? <div>DICTIONARY NAME: {props.pattern.pattern}</div> : null}\n    </ListMessage>\n  )\n}\n\nfunction Suggestion(props){\n  return (\n    <SuggestionMessage lightMode={props.lightMode} color=\"yellow\" className=\"issue\">\n      {props.body != undefined ? props.body : null}\n    </SuggestionMessage>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}