{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Score","props","Progress","className","percent","indicating","GuessMessage","styled","Message","Guess","color","guesses","Time","ListMessage","verySlow","slow","fast","veryFast","Warning","body","AtlasMessage","Atlas","onClick","hook","style","boxShadow","SuggestionMessage","Pattern","pattern","token","Suggestion","undefined","App","useState","password","setPassword","selected","setSelected","issues","zxcvbn","console","log","Input","id","onChange","e","target","value","placeholder","score","feedback","suggestions","map","issue","key","warning","crack_times_display","online_throttling_100_per_hour","online_no_throttling_10_per_second","offline_slow_hashing_1e4_per_second","offline_fast_hashing_1e10_per_second","sequence","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c7ca957.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport zxcvbn from 'zxcvbn';\nimport './App.css';\nimport { Input, Message, Progress } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport styled from 'styled-components';\n\n\nfunction App() {\n  let [password, setPassword] = useState(\"\")\n  let [lightMode, setLightMode] = useState(false);\n  let [selected, setSelected] = useState(\"\");\n  let issues = zxcvbn(password);\n  console.log(issues)\n  return (\n    <div className=\"center\">\n      <div className=\"title\">HOW STRONG IS YOUR PASSWORD?</div>\n      <Input id=\"password\" onChange={(e) => setPassword(e.target.value)} value={password} placeholder=\"ENTER PASSWORD\"/>\n      <Score percent={issues.score}/>\n      <Guess guesses={issues.guesses}/>\n      <Atlas hook={setSelected}/>\n      {issues.feedback.suggestions != \"\" && (selected == \"\" || selected == \"Suggestion\") ? issues.feedback.suggestions.map((issue, key) => (\n        <Suggestion key={key} body={issue}/>\n      )) : null}\n      {issues.feedback.warning != \"\" && (selected == \"\" || selected == \"Warning\") ? <Warning body={issues.feedback.warning}/> : null}\n      {(selected == \"\" || selected == \"Time\") ? \n        <Time verySlow={issues.crack_times_display.online_throttling_100_per_hour} \n            slow={issues.crack_times_display.online_no_throttling_10_per_second} \n            fast={issues.crack_times_display.offline_slow_hashing_1e4_per_second}\n            veryFast={issues.crack_times_display.offline_fast_hashing_1e10_per_second}/> \n        : null}\n      {(selected == \"\" || selected == \"Pattern\") ?\n        <div>\n          {issues.sequence.map((pattern, key) => (\n            <Pattern pattern={pattern} key={key}/>\n          ))} \n        </div> \n        : null}\n    </div>\n  );\n}\n\nfunction Score(props){\n  return (\n    <Progress className=\"score\" percent={((props.percent+1)/5)*100} indicating/>\n  )\n}\n\nexport const GuessMessage = styled(Message)`\n  text-align: center;\n  width: 20vw;\n  margin: 0 auto !important;\n  margin-bottom: 2vh !important;\n  background: rgba(255, 255, 255, 0.05) !important;\n`\n\nfunction Guess(props){\n  return (\n      <GuessMessage color=\"purple\" className=\"guess\">FOUND IN {props.guesses} GUESSES!</GuessMessage>\n  )\n}\n\nfunction Options(props){\n  return (\n    <div></div>\n  )\n}\n\nfunction Time(props){\n  return (\n    <div>\n      <ListMessage color=\"blue\" className=\"time\">Very Slow: {props.verySlow} (100 Attempts per hour)</ListMessage>\n      <ListMessage color=\"blue\" className=\"time\">Slow: {props.slow} (10 Attempts per second)</ListMessage>\n      <ListMessage color=\"blue\" className=\"time\">Fast: {props.fast} (1000 Attempts per second)</ListMessage>\n      <ListMessage color=\"blue\" className=\"time\">Very Fast: {props.veryFast} (1 Billion Attempts per second)</ListMessage>\n    </div>\n  )\n}\n\nfunction Warning(props){\n  return (\n    <ListMessage color=\"red\" className=\"warning\">\n      {props.body}\n    </ListMessage>\n  )\n}\n\nexport const AtlasMessage = styled(Message)`\n  width: 6vw;\n  margin: 0 2vw !important;  \n  background: rgba(255, 255, 255, 0.05) !important;\n  cursor: pointer;\n  @media (max-width: 1242px) {\n    margin: 0 1vw !important;\n    width: 9vw;\n  }\n\n  @media (max-width: 968px) {\n    margin: 0 0.5vw !important;\n    width: 11vw;\n  }\n\n  @media (max-width: 816px) {\n    margin: 0 !important;\n    padding: 0.5em !important;\n  }\n\n  @media (max-width: 676px) {\n    margin: 0 !important;\n    padding: 0em !important;\n  }\n`;\n\nexport const ListMessage = styled(Message)`\n  margin: 2vh auto !important;\n  background: rgba(255, 255, 255, 0.05) !important;\n`;\n\nfunction Atlas(props){\n  return (\n    <div className=\"atlas\">\n      <AtlasMessage onClick={() => props.hook(\"Warning\")} color=\"red\" >Warning</AtlasMessage>\n      <AtlasMessage onClick={() => props.hook(\"Suggestion\")} color=\"yellow\">Suggestions</AtlasMessage>\n      <AtlasMessage onClick={() => props.hook(\"\")} style={{boxShadow: \"0 0 0 1px white inset, 0 0 0 0 transparent\", color: \"white\"}}>All</AtlasMessage>\n      <AtlasMessage onClick={() => props.hook(\"Pattern\")} color=\"green\">Patterns</AtlasMessage>\n      <AtlasMessage onClick={() => props.hook(\"Time\")} color=\"blue\">Times</AtlasMessage>\n    </div>\n  )\n}\n\nexport const SuggestionMessage = styled(Message)`\n  margin: 1vh auto !important;\n  background: rgba(255, 255, 255, 0.05) !important;\n`\n\nfunction Pattern(props){\n  return (\n    <ListMessage color=\"green\" className=\"pattern\">\n      <div>TOKEN: {props.pattern.token}</div>\n      <div>PATTERN: {props.pattern.pattern}</div>\n      {props.pattern.pattern == \"dictionary\" ? <div>DICTIONARY NAME: {props.pattern.pattern}</div> : null}\n    </ListMessage>\n  )\n}\n\nfunction Suggestion(props){\n  return (\n    <SuggestionMessage color=\"yellow\" className=\"issue\">\n      {props.body != undefined ? props.body : null}\n    </SuggestionMessage>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}