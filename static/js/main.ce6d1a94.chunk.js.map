{"version":3,"sources":["Misc.js","Generator.js","App.js","Analyzer.js","serviceWorker.js","index.js"],"names":["Guideline","props","className","generatePassword","type","length","dict","phrase","str","randomWord","i","randomCharacter","console","log","charAt","passPhrase","keys","Object","result","Math","random","chars","charLen","floor","char","toUpperCase","hasOwnProperty","alphadict","Pass","name","strength","cracktime","barStyle","bits","issues","rank","InitPass","PassBar","style","Header","Title","Generator","comparePass","a","b","Number","analyzePassword","e","text","string","checkString","charpool","numeric","match","lowercase","uppercase","special","regexes","charsets","amounts","boolarray","total","push","amount","charset","pw_type","log2","pow","entropy","crack","comb","combinations","x","f","parseFloat","toExponential","obj","strengths","value","pw_strength","percentage","hue","quantize","interpolateRgb","passHue","width","background","addPassword","toFixed","financial","App","state","inpass","outpass","errors","incurrent","outcurrent","select","len","genBox","handleChangeLister","bind","handleClickLister","handleChangeGenerator","handleClickGenerator","handleOutputChange","handleChangeInputGenerator","axios","get","then","response","txt","words","split","c","makeDict","data","catch","error","CurrentPass","flexStyle","display","flexDirection","flexCol","alignItems","overflow","CurrPass","this","undefined","barhue","newGenerator","GenList","map","pass","key","min","max","onChange","id","hanldeChangeInputGenerator","onClick","size","PassList","padding","outline","val","target","substring","setState","temp","sort","forEach","element","document","getElementById","input","test","toLowerCase","React","Component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce6d1a94.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Guideline = props => (\r\n<div className=\"Guideline\">\r\n    <h2>Guidelines</h2>\r\n    <div>\r\n        <ul>Use a minimum password length of 10 or more characters if permitted.</ul>\r\n        <ul>Include lowercase and uppercase alphabetic characters, numbers and symbols if permitted.</ul>\r\n        <ul>Avoid character repetition, keyboard patterns, dictionary words, letter or number sequences.</ul>\r\n    </div>\r\n</div>\r\n)\r\n\r\n\r\nexport const Problems = props => (\r\n<div>\r\n    <h1>Problems</h1>\r\n    <div>\r\n        <ul>Default passwords (as supplied by the system vendor and meant to be changed at installation time): password, default, admin, guest, etc. Lists of default passwords are widely available on the internet.</ul>\r\n        <ul>Dictionary words: chameleon, RedSox, sandbags, bunnyhop!, IntenseCrabtree, etc., including words in non-English dictionaries.</ul>\r\n        <ul>Words with numbers appended: password1, deer2000, john1234, etc., can be easily tested automatically with little lost time.</ul>\r\n        <ul>Words with simple obfuscation: p@ssw0rd, l33th4x0r, g0ldf1sh, etc., can be tested automatically with little additional effort. For example, a domain administrator password compromised in the DigiNotar attack was reportedly Pr0d@dm1n.</ul>\r\n        <ul>Doubled words: crabcrab, stopstop, treetree, passpass, etc.</ul>\r\n        <ul>Common sequences from a keyboard row: qwerty, 123456, asdfgh, fred, etc.</ul>\r\n        <ul>Numeric sequences based on well known numbers such as 911 (9-1-1, 9/11), 314159... (pi), 27182... (e), 112 (1-1-2), etc.</ul>\r\n        <ul>Identifiers: jsmith123, 1/1/1970, 555–1234, one's username, etc.</ul>\r\n        <ul>Weak passwords in non-English languages, such as contraseña (Spanish) and ji32k7au4a83 (bopomofo keyboard encoding from Chinese)</ul>\r\n        <ul>Anything personally related to an individual: license plate number, Social Security number, current or past telephone numbers, student ID, current address, previous addresses, birthday, sports team, relative's or pet's names/nicknames/birthdays/initials, etc., can easily be tested automatically after a simple investigation of a person's details.</ul>\r\n        <ul>Dates: dates follow a pattern and make your password weak.</ul>\r\n    </div>\r\n</div>\r\n)\r\n\r\n// Checks if password is string followed by a number\r\nexport function strNumber(string){\r\n    let REstr = /[a-zA-Z]/g;\r\n    let REnum = /[0-9]/g;\r\n    var match;\r\n    let MAXstr;\r\n    let MAXnum;\r\n    let NUMfound = [];\r\n    let count = 0;\r\n    let len = 2;\r\n    \r\n    while ((match = REstr.exec(string)) != null) {\r\n      //console.log(\"STR match found at \" + match.index);\r\n      MAXstr = match.index;\r\n    }\r\n  \r\n    while ((match = REnum.exec(string)) != null) {\r\n      //console.log(\"NUM match found at \" + match.index);\r\n      MAXnum = match.index;\r\n      NUMfound.push(match.index)\r\n    }\r\n  \r\n    if(MAXnum > MAXstr){\r\n      //console.log(\"Number found after max str val\")\r\n      for (var i = 0; i < NUMfound.length; i++){\r\n        if(NUMfound[i] > MAXstr){\r\n          if(count == 0){\r\n            count++;\r\n            //console.log(\"First\")\r\n          } else {\r\n            if(NUMfound[i]-NUMfound[i-1] == 1){\r\n              count++;\r\n              //console.log(\"Second\")\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      if(count >= len){\r\n        return true;\r\n      } \r\n    }\r\n      \r\n    return false;\r\n}\r\n\r\n","\r\n// # 1 Random Words \r\n// # 2 Code Words\r\n// # 3 Random Characters\r\nexport function generatePassword(type, length, dict, phrase){\r\n    let str = \"\";\r\n    switch (type){\r\n      case 1:\r\n        while(str.length < length){\r\n          str += randomWord(dict);\r\n        }\r\n        break;\r\n      case 2:\r\n        for (var i = 0; i < length; i++){\r\n          str += randomCharacter();\r\n        }\r\n        break;\r\n      case 3:\r\n        console.log(phrase)\r\n        for (var i = 0; i < length; i++){\r\n          console.log(phrase.charAt(i))\r\n          str += passPhrase(dict, phrase.charAt(i));\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return str;\r\n  }\r\n  \r\n  \r\nfunction randomWord(dict){\r\n    var keys = Object.keys(dict);\r\n    var result = keys[keys.length * Math.random() << 0];\r\n    console.log(result);\r\n    return result;\r\n}\r\n  \r\nfunction randomCharacter(){\r\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+';\r\n    var charLen = chars.length;\r\n    return chars.charAt(Math.floor(Math.random() * charLen));\r\n}\r\n\r\nfunction passPhrase(dict, char){\r\n  char = char.toUpperCase();\r\n  console.log(dict[char])\r\n  if(dict.hasOwnProperty(char)){\r\n    var result = dict[char][Math.floor(Math.random() * dict[char].length)];\r\n  }\r\n  console.log(result);\r\n  return result;\r\n}\r\n\r\n\r\n\r\n  ","import React from 'react';\nimport {pw_type, pw_strength, combinations, entropy} from './Analyzer';\nimport {Guideline, strNumber} from './Misc';\nimport {generatePassword} from './Generator';\nimport './App.css';\nimport './PassBar.css';\nimport './Pass.css';\nimport './Guidelines.css';\nimport {interpolateRgb, quantize} from \"d3-interpolate\";\nimport axios from 'axios';\n\nconst CPS = 588235;\n//The dictionary lookup object\nvar dict = {};\nvar alphadict = {}\nconst Pass = props => (\n  <tr className=\"passBox\">\n      <td>{props.name}</td>\n      <td>{props.strength}</td>\n      <td>{props.cracktime}</td>\n      <td className=\"tablecell\">\n        <PassBar barStyle={props.barStyle} bits={props.bits}></PassBar>\n      </td>\n      <td>{props.issues}</td>\n      <td>{props.rank}</td>\n  </tr>\n)\n\n\nconst InitPass = props => (\n  <div className=\"passBox2\">\n    <p className=\"tablecell2\">\n      <PassBar barStyle={props.barStyle} bits={props.strength}></PassBar>\n    </p>\n    <p>{props.issues}</p>\n  </div>\n)\n\nconst PassBar = props => (\n  <div className=\"TopBar\">\n    <div style={props.barStyle} className=\"LowerBar\">\n      {props.bits}\n    </div>\n  </div>\n)\n\nconst Header = props => (\n  <div>\n    <h1>PassChecker</h1>\n  </div>\n)\n\nconst Title = props => (\n  <tr className=\"passBox\">\n    <th>Password </th>\n    <th>Strength </th>\n    <th>Cracktime (sec)</th> \n    <th>Score</th>\n    <th>Issues</th>\n    <th>Rank</th>\n  </tr>\n)\n\nconst Generator = props => (\n  <div>\n    <h2>Generator</h2>\n    <p>There are three types of generation provided:</p>\n    <p>Generation by using random words.</p>\n    <p>Generation by using random characters.</p>\n    <p>Generation by using characters to create a passphrase.</p>\n  </div>\n)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inpass    : [],\n      outpass   : [], \n      errors    : [],\n      incurrent : \"\",\n      outcurrent: \"\",\n      select    : false,\n      len       : 10,\n      genBox    : \"\"\n    }\n\n    this.handleChangeLister = this.handleChangeLister.bind(this);\n    this.handleClickLister = this.handleClickLister.bind(this);\n\n    this.handleChangeGenerator = this.handleChangeGenerator.bind(this);\n    this.handleClickGenerator = this.handleClickGenerator.bind(this);\n\n    this.handleOutputChange = this.handleOutputChange.bind(this);\n    this.handleChangeInputGenerator = this.handleChangeInputGenerator.bind(this);\n  }\n\n  componentDidMount() {\n    // Get the dictionary\n    axios.get(\"https://raw.githubusercontent.com/redbo/scrabble/master/dictionary.txt\")\n      .then(response => {\n        //console.log(response);\n        makeDict(response.data);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  render(){\n    let inputStyle = {\n      padding: \"10px\",\n      outline: \"none\"\n    }\n\n    let flexStyle = {\n      display: \"flex\",\n      flexDirection: \"row\"\n    }\n\n    let flexCol = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      overflow: \"hidden\"\n    }\n    \n    const CurrPass = this.state.incurrent;\n    var CurrentPass;\n    if(CurrPass != null && CurrPass != \"\" && CurrPass != undefined){\n      let barhue = {\n        background: CurrPass.barStyle.background\n      }\n      CurrentPass = (\n            <InitPass strength={CurrPass.strength} barStyle={barhue} bits={CurrPass.bits}></InitPass>\n          )\n    } else {\n      CurrentPass = (\n        null\n      )\n    }\n\n    const GenList = this.state.outpass.map(pass => {\n      return (\n          <Pass key={pass.name} name={pass.name} strength={pass.strength} cracktime={pass.cracktime} barStyle={pass.barStyle} bits={pass.bits} rank={pass.rank} issues={pass.issues}></Pass>\n      )\n    })\n\n    const select = this.state.select;\n    var newGenerator;\n    if(select){\n      newGenerator = (\n        <div>\n          <Generator></Generator>\n          <div style={flexCol}>\n          <div>\n              <div style={flexStyle}>\n                <div>Length:</div>\n                <input type=\"range\" min=\"1\" max=\"5\" onChange={this.handleOutputChange} value={this.state.len}></input>\n                <output id=\"barnum\">{this.state.len} Word(s)</output>\n              </div>\n              <input id=\"outcurrent\" type=\"text\" onChange={this.hanldeChangeInputGenerator}></input>\n              <button name=\"1\"          onClick= {this.handleClickGenerator}>Generate</button>\n              \n          </div>\n          <select onChange={this.handleChangeGenerator} id=\"genSelect\" name=\"generators\" size=\"3\">\n              <option value=\"1\">Random Words</option>\n              <option value=\"2\">Random Characters</option>\n              <option value=\"3\">Passphrase</option>\n          </select>\n          </div>\n          <table>\n              <Title></Title>\n              {GenList}\n          </table>\n        </div>\n      )\n    } else {\n        newGenerator = (\n          <div>\n            <Generator></Generator>\n            <div style={flexCol}>\n              <div>\n                <p>Length:</p>\n                <input type=\"range\" min=\"1\" max=\"20\" onChange={this.handleOutputChange} value={this.state.len}></input>\n                <output id=\"barnum\">{this.state.len} Character(s)</output>\n              </div>\n              <div>\n                <button name=\"1\" onClick= {this.handleClickGenerator}>Generate</button>\n              </div>\n              <select onChange={this.handleChangeGenerator} id=\"genSelect\" name=\"generators\" size=\"3\">\n                  <option value=\"1\">Random Words</option>\n                  <option value=\"2\">Random Characters</option>\n                  <option value=\"3\">Passphrase</option>\n              </select>\n            </div>\n            <table>\n              <Title></Title>\n              {GenList}\n            </table>\n          </div>\n        )\n    }\n\n    const PassList = this.state.inpass.map(pass => {\n      return (\n          <Pass key={pass.name} name={pass.name} strength={pass.strength} cracktime={pass.cracktime} barStyle={pass.barStyle} bits={pass.bits} rank={pass.rank} issues={pass.issues}></Pass>\n      )\n    })\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Header></Header>\n          <h2>Compare</h2>\n          <div style={flexStyle}>\n            <input  id=\"inputPass\" name=\"incurrent\" onChange={this.handleChangeLister} type=\"text\"></input>\n            <button                name=\"4\"         onClick={this.handleClickLister}> Add </button>\n          </div>\n          <div style={inputStyle}>\n            {CurrentPass}\n          </div>\n          <table>\n            <Title></Title>\n            {PassList}    \n          </table> \n          {newGenerator}\n          <Guideline></Guideline>\n        </header>\n      </div>\n    );\n  }\n\n  handleChangeLister(e) {\n    console.log(\"Handling change. (Lister) \")\n    var val = e.target.value;\n    if(val.length > 20){\n      val = val.substring(0, 20);\n      e.target.value = val;\n    }\n    const value = analyzePassword(val);\n    this.setState({\n      ...this.state,\n      [e.target.name]: value\n    });\n  }\n\n  handleClickLister(e){\n    console.log(\"Handling click. (Lister)\");\n    if(this.state.incurrent != \"\" && this.state.incurrent != null){\n      let temp = [...this.state.inpass, this.state.incurrent];\n      temp.sort(comparePass);\n      let i = 1;\n      temp.forEach(function (element) {\n        element.rank = i;\n        i++;\n      });\n      this.setState({\n          ...this.state,\n          inpass: temp,\n          incurrent: null\n      });\n    }\n    let input = document.getElementById(\"inputPass\");\n    input.value = \"\";\n  }\n\n  handleOutputChange(e){\n    this.setState({\n      ...this.state,\n      len: e.target.value\n  });\n  }\n\n  handleChangeInputGenerator(e){\n    if(e.value.length > this.state.len){\n    }\n  }\n\n  handleChangeGenerator(){\n    console.log(\"Handling change. (Generator) \")\n    let e = document.getElementById(\"genSelect\");\n    if(e.value == \"3\"){\n      this.setState({\n        ...this.state,\n        select: true,\n        len: 3\n      });\n\n    } else {\n      this.setState({\n        ...this.state,\n        select: false,\n        len: 10\n      });\n    }\n  }\n\n  handleClickGenerator(){\n    console.log(\"Handling click. (Generator)\");\n    let e = document.getElementById(\"genSelect\");\n    let input = document.getElementById(\"outcurrent\")\n    let pass = \"\";\n    switch(e.value){\n      case \"1\":\n        pass = generatePassword(1, this.state.len, dict, null);\n        break;\n      case \"2\":\n        pass = generatePassword(2, this.state.len, dict, null);\n        break;\n      case \"3\":\n        if(/^[a-z]+$/i.test(input.value)){\n          pass = generatePassword(3, this.state.len, alphadict, input.value);\n        } else {\n          console.log(\"ERROR, ONLY LETTERS ALLOWED\")\n        }\n        break;\n      default:\n        console.log(\"Case not found.\")\n        break;\n    }\n    let val = pass.toLowerCase();\n    if(val.length > 20){\n      val = val.substring(0, 20);\n    }\n    const value = analyzePassword(val);\n    if(value != undefined){\n      this.setState({\n        ...this.state,\n        outcurrent: \"\",\n        outpass: [...this.state.outpass, value]\n      });\n    }\n  }\n\n\n}\n\n// Sort passwords base on length\nfunction comparePass(a, b){\n  console.log(typeof(a.bits))\n  if(Number(a.bits) < Number(b.bits)){\n    return 1;\n  }\n  if(Number(a.bits) > Number(b.bits)){\n    return -1;\n  }\n  return 0;\n}\n\n// Analyze Password\nfunction analyzePassword(e){\n  if(e != null){\n    let text = e;\n    if(checkString(text)){\n      let charpool = pw_type(text);\n      let length = text.length;\n      let bits = entropy(length, charpool.amount);\n      let comb = combinations(length, charpool.amount);\n      let crack = cracktime(comb)\n      crack = expo(crack, 2);\n      let obj = pw_strength(bits);\n      let style = addPassword(obj.value);\n      bits = financial(bits);\n      return {name: text, strength: obj.strength, cracktime: crack, bits:bits ,barStyle: style};\n    }\n  }\n}\n\nfunction expo(x, f) {\n  return Number.parseFloat(x).toExponential(f);\n}\n\nfunction financial(x) {\n  return Number.parseFloat(x).toFixed(2);\n}\n\n// Password Hue\nfunction passHue(value){\n  let colors = quantize(interpolateRgb(\"red\", \"green\"), 5);\n  return colors[value]\n}\n\n// Passbar style\nfunction addPassword(value){\n  let percentage = 20*(value+1);\n  let hue = passHue(value);\n  let style = {\n    width: percentage + \"%\",\n    background: hue\n  }\n  return style;\n}\n\n// Check if string is valid.\n\nfunction checkString(string){\n  if(string == null) {\n    console.log(\"String is null.\")\n  } else if(string == \"\") {\n    console.log(\"String is empty.\")\n  } else {\n    return true;\n  }\n}\n\n// Amount of time in seconds until crack.\nfunction cracktime(comb){\n  return comb/CPS;\n}\n\nfunction problems(string) {\n  let problems = []\n  let p1 = strNumber(string);\n  //console.log(p1);\n  let word = findWord(string);\n}\n\nfunction makeDict(txt){\n  // Get an array of all the word\n  var words = txt.split(\"\\n\");\n  // And add them as properties to the dictionary lookup\n  // This will allow for fast lookups later\n  for (var i = 0; i < words.length; i++ ) {\n    dict[words[i]] = true;\n    let c = words[i][0];\n    if(!alphadict.hasOwnProperty(c)){\n      alphadict[c] = [words[i]];\n    } else {\n      alphadict[c] = [...alphadict[c], words[i]];\n    }\n  }\n  console.log(alphadict)\n}\n\n\nfunction findWord(letters) {\n  // Clone the array for manipulation\n  var curLetters = letters.split('');\n  //console.log(curLetters)\n  let word = \"\";\n  // Make sure the word is at least 3 letters long\n  while (curLetters.length > 2) {\n      // Get a word out of the existing letters\n      word = curLetters.join(\"\").toUpperCase();\n      // And see if it's in the dictionary\n      \n      if (dict[word]) {\n          // If it is, return that word\n          console.log(\"FOUND: \" + word);\n          return word;\n      }\n      // Otherwise remove another letter from the end\n      curLetters.pop();\n  }\n}\n\nfunction doubleWord(){\n\n}\n\nexport default App;\n","// Calculates entropy.\r\nexport function entropy(length, charpool) {\r\n    return Math.log2(Math.pow(charpool, length));\r\n}\r\n\r\n// Calculates the number of combinations given a length and a charset.\r\nexport function combinations(length, charpool) {\r\n    return Math.pow(charpool, length);\r\n}\r\n\r\n// Returns the password type given a string.\r\nexport function pw_type(string){\r\n    // Matchs numbers.\r\n    let numeric = string.match(/[1-9]/g);\r\n    // Match lowercase.\r\n    let lowercase = string.match(/[a-z]/g);\r\n    // Match uppercase.\r\n    let uppercase = string.match(/[A-Z]/g);\r\n    // Match special characters.\r\n    let special = string.match(/[!@#\\$%\\^\\&*\\)\\(+=._-]/g);\r\n\r\n    // Array of regexes, charsets and amounts.\r\n    let regexes = [numeric, lowercase, uppercase, special];\r\n    let charsets = [\"Numeric\", \"Alphabetic Case-Insensitive\", \"Alphabetic Case-Sensitive\" , \"Alphanumeric Case-Insensitive\", \"Alphanumeric Case-Sensitive\", \"Alphanumeric + Special characters\"]\r\n    let amounts = [10, 26, 26, 8];\r\n\r\n    // Calculates the length of the charset\r\n    let boolarray = [];\r\n    let total = 0;\r\n    let charset = \"\";\r\n    for (let i = 0; i < amounts.length; i++){\r\n        if(regexes[i]){\r\n            boolarray.push(true);\r\n            total += amounts[i];\r\n        } else {\r\n            boolarray.push(false);\r\n        }\r\n    }\r\n\r\n    // Selects the charset.\r\n    if(special){\r\n        charset = charsets[charsets.length-1];\r\n    } else {\r\n        if(lowercase && uppercase && numeric){ \r\n            charset = charsets[charsets.length-2];\r\n        } else {\r\n            if(lowercase && numeric || uppercase && numeric){\r\n                charset = charsets[charsets.length-3];\r\n            } else {\r\n                if(lowercase && uppercase){\r\n                charset = charsets[charsets.length-4];\r\n                } else {\r\n                    if(lowercase || uppercase){\r\n                        charset = charsets[charsets.length-5];\r\n                    } else {\r\n                        charset = charsets[charsets.length-6];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {amount:total, charset:charset}\r\n}\r\n\r\n\r\nexport function pw_strength(entropy){\r\n    let strengths = [\"Very Weak\", \"Weak\", \"Reasonable\", \"Strong\", \"Very Strong\"]\r\n    if(entropy < 28){\r\n        return {strength:strengths[0], value:0};\r\n    } else if(entropy > 28 && entropy < 35){\r\n        return {strength:strengths[1], value:1};\r\n    } else if(entropy > 35 && entropy < 59){\r\n        return {strength:strengths[2], value:2};\r\n    } else if(entropy > 59){\r\n        return {strength:strengths[3], value:3};\r\n    } else {\r\n        return {strength:strengths[3], value:3};\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}