{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Password","styled","Input","props","lightMode","ElemScore","Progress","Score","className","percent","indicating","addBodyClass","useEffect","document","body","classList","add","remove","GuessMessage","Message","color","OptionMessage","Guess","guesses","Options","info","hookLight","hookInfo","MHeader","Header","MContent","Modal","Content","style","boxShadow","display","Info","hook","onClick","width","closeIcon","open","trigger","onClose","onOpen","content","SuggestionMessage","Time","verySlow","slow","fast","veryFast","Warning","AtlasMessage","ListMessage","Atlas","Pattern","pattern","token","Suggestion","undefined","App","useState","password","setPassword","setLightMode","selected","setSelected","showInfo","setShowInfo","issues","zxcvbn","textStyle","id","onChange","e","target","value","placeholder","score","feedback","warning","suggestions","map","issue","key","crack_times_display","online_throttling_100_per_hour","online_no_throttling_10_per_second","offline_slow_hashing_1e4_per_second","offline_fast_hashing_1e10_per_second","sequence","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a0b3e31.chunk.js","sourcesContent":["import React, {useState ,useEffect ,useRef } from 'react';\nimport zxcvbn from 'zxcvbn';\nimport './App.css';\nimport { Input, Message, Progress, Modal, Header} from 'semantic-ui-react';\nimport {FaRegLightbulb} from 'react-icons/fa';\nimport 'semantic-ui-css/semantic.min.css';\nimport styled from 'styled-components';\n\nfunction App() {\n  let [password, setPassword] = useState(\"\")\n  let [lightMode, setLightMode] = useState(false);\n  let [selected, setSelected] = useState(\"\");\n  let [showInfo, setShowInfo] = useState(false);\n  let issues = zxcvbn(password);\n  let textStyle = null;\n\n\n  if(lightMode){\n    textStyle = {color: \"black\"}\n    addBodyClass(\"light\")()\n  } else {\n    textStyle = {color: \"white\"}\n    addBodyClass(\"dark\")()\n  }\n\n  return (\n    <div className=\"center\">\n      <div style={textStyle} className=\"title\">HOW STRONG IS YOUR PASSWORD?</div>\n      <Password lightMode={lightMode} style={textStyle} id=\"password\" onChange={(e) => setPassword(e.target.value)} value={password} placeholder=\"ENTER PASSWORD\"/>\n      <Score percent={issues.score} lightMode={lightMode}/>\n      <Guess guesses={issues.guesses} hookLight={setLightMode} info={showInfo} hookInfo={setShowInfo} lightMode={lightMode}/>\n      <Atlas lightMode={lightMode} hook={setSelected}/>\n      <ListMessage lightMode={lightMode}>\n        {issues.feedback.warning != \"\" && (selected == \"\" || selected == \"Warning\") ? <Warning lightMode={lightMode} body={issues.feedback.warning}/> : null}\n        {issues.feedback.suggestions != \"\" && (selected == \"\" || selected == \"Suggestion\") ? issues.feedback.suggestions.map((issue, key) => (\n          <Suggestion lightMode={lightMode} key={key} body={issue}/>\n        )) : null}\n        {(selected == \"\" || selected == \"Time\") ? \n          <Time lightMode={lightMode} verySlow={issues.crack_times_display.online_throttling_100_per_hour} \n              slow={issues.crack_times_display.online_no_throttling_10_per_second} \n              fast={issues.crack_times_display.offline_slow_hashing_1e4_per_second}\n              veryFast={issues.crack_times_display.offline_fast_hashing_1e10_per_second}/> \n          : null}\n        {(selected == \"\" || selected == \"Pattern\") ?\n          <div className=\"times\">\n            {issues.sequence.map((pattern, key) => (\n              <Pattern lightMode={lightMode} pattern={pattern} key={key}/>\n            ))} \n          </div> \n          : null}\n      </ListMessage>\n    </div>\n  );\n}\n\nexport const Password = styled(Input)`\n  input {\n    color: ${props => props.lightMode ? \"black !important\" : \"white !important\"};\n  }\n`;\n\nexport const ElemScore = styled(Progress)`\n  .label {\n    color: ${props => props.lightMode ? \"black !important\" : \"white !important\"};\n    margin-top: -2.5vh !important;\n  }\n`;\nfunction Score(props){\n  return (\n    <ElemScore lightMode={props.lightMode} className=\"score\" percent={((props.percent+1)/5)*100} indicating>\n        {((props.percent+1)/5) * 5} / 5\n    </ElemScore>\n  )\n}\n\nexport function addBodyClass(className) {\n  return () => useEffect(() => {\n    document.body.classList.add(className);\n    return () => { document.body.classList.remove(className); }\n  });\n}\n\nexport const GuessMessage = styled(Message)`\n  text-align: center;\n  width: 20vw;\n  margin: 0 auto !important;\n  margin-bottom: 2vh !important;\n  background: ${props => props.lightMode ? props.color : 'rgba(255, 255, 255, 0.05) !important'};\n  @media (max-width: 425px) {\n    width: auto;\n    margin-right: 0.5vw !important;\n  }\n`;\n\nexport const OptionMessage = styled(Message)`\n  text-align: center;\n  width: 7.5vw;\n  margin: auto 0.2vw !important;\n  margin-bottom: 2vh !important;\n  background: ${props => props.lightMode ? props.color : 'rgba(255, 255, 255, 0.05) !important'};\n  color: ${props => props.color == \"white\" ? \"black\" : \"auto\"};\n  cursor: pointer;\n  @media (max-width: 768px) {\n    width: 14vw;\n  }\n  @media (max-width: 425px) {\n    width: auto;\n    margin-right: 0.5vw !important;\n  }\n`;\n\nfunction Guess(props){\n  return (\n    <div className=\"options\">\n      <GuessMessage lightMode={props.lightMode} color=\"purple\">FOUND IN {props.guesses} GUESSES!</GuessMessage>\n      <Options lightMode={props.lightMode} info={props.info} hookLight={props.hookLight} hookInfo={props.hookInfo}/>\n    </div>\n  )\n}\n\n\nexport const MHeader = styled(Header)`\n  background: rgba(0, 0, 0, 0.9) !important;\n  border-bottom: 1px solid white !important;\n  color: white !important;\n`\n\nexport const MContent = styled(Modal.Content)`\n  background: rgba(0, 0, 0, 0.9) !important;\n  color: white !important;\n`\n\nfunction Options(props){\n    let style = null;\n  if(!props.lightMode){\n    style={boxShadow: \"0 0 0 1px white inset, 0 0 0 0 transparent\", color: \"white\"}\n  }\n  return (\n    <div style={{display:\"flex\"}}>\n      <Info info={props.info} hook={props.hookInfo} lightMode={props.lightMode}/>\n      <OptionMessage lightMode={props.lightMode} onClick={() => props.hookLight(!props.lightMode)} className=\"info\" style={style}><FaRegLightbulb/></OptionMessage>\n    </div>\n  )\n}\n\nfunction Info(props) {\n  let style = null;\n  if(!props.lightMode){\n    style={boxShadow: \"0 0 0 1px white inset, 0 0 0 0 transparent\", color: \"white\", width: \"100%\"}\n  }\n  return (\n    <Modal\n      closeIcon\n      open={props.info}\n      trigger={<OptionMessage lightMode={props.lightMode} color=\"teal\" className=\"info\">Info</OptionMessage>}\n      onClose={() => props.hook(false)}\n      onOpen={() => props.hook(true)}\n    >\n      <MHeader content='Information' />\n      <MContent>\n        Welcome! This is StrongPass Password Strength Estimation.\n        <br/> \n        This info box gives more information regarding each of the four categories as well as some various other tips.  \n        <br/> \n        <SuggestionMessage style={style} lightMode={props.lightMode} color=\"white\">\n          1 Too guessable: risky password. (guesses less than 10^3)\n          <br/>\n          2 Very guessable: protection from throttled online attacks. (guesses less than 10^6)\n          <br/>\n          3 Somewhat guessable: protection from unthrottled online attacks. (guesses less than 10^8)\n          <br/>\n          4 Safely unguessable: moderate protection from offline slow-hash scenario. (guesses less than 10^10)\n          <br/>\n          5 Very unguessable: strong protection from offline slow-hash scenario. (guesses greater than 10^10)\n        </SuggestionMessage>\n        <SuggestionMessage style={{width: \"100%\"}} lightMode={props.lightMode} color=\"red\" className=\"warning\">\n            Explainations of the errors in a particular password.  \n        </SuggestionMessage>\n        <SuggestionMessage style={{width: \"100%\"}} lightMode={props.lightMode} color=\"yellow\" className=\"issue\">\n            A list of suggestions to help choose a less guessable password.\n        </SuggestionMessage>\n        <SuggestionMessage style={{width: \"100%\"}} lightMode={props.lightMode} color=\"blue\" className=\"time\">\n            Very Slow: Online attack on a service that ratelimits password auth attempts.\n            <br/>\n            Slow: Online attack on a service that doesn't ratelimit, or where an attacker has outsmarted ratelimiting.\n            <br/>\n            Fast: Offline attack that assumes multiple attackers, proper user-unique salting, and a slow hash function. (bcrypt, scrypt, PBKDF2)\n            <br/>\n            Very Fast: Offline attack with user-unique salting but a fast hash function. (SHA-1, SHA-256 or MD5).\n        </SuggestionMessage>\n        <SuggestionMessage style={{width: \"100%\"}} lightMode={props.lightMode} color=\"green\" className=\"pattern\">\n            Bruteforce: Token is found by doing a bruteforce search on all possible character combinations.\n            <br/>\n            Sequence: Token is found by searching common sequences.\n            <br/>\n            Dictionary: Token is found by searching a dictionary.\n            <br/>\n            Repeated: Token is found by looking at a previous part of the whole password.\n        </SuggestionMessage>\n      </MContent>\n    </Modal>\n  )\n}\n\nfunction Time(props){\n  return (\n    <div className=\"times\">\n      <SuggestionMessage lightMode={props.lightMode} color=\"blue\" className=\"time\">Very Slow: {props.verySlow} (100 Attempts per hour)</SuggestionMessage>\n      <SuggestionMessage lightMode={props.lightMode} color=\"blue\" className=\"time\">Slow: {props.slow} (10 Attempts per second)</SuggestionMessage>\n      <SuggestionMessage lightMode={props.lightMode} color=\"blue\" className=\"time\">Fast: {props.fast} (1000 Attempts per second)</SuggestionMessage>\n      <SuggestionMessage lightMode={props.lightMode} color=\"blue\" className=\"time\">Very Fast: {props.veryFast} (1 Billion Attempts per second)</SuggestionMessage>\n    </div>\n  )\n}\n\nfunction Warning(props){\n  return (\n    <SuggestionMessage lightMode={props.lightMode} color=\"red\" className=\"warning\">\n      {props.body}\n    </SuggestionMessage>\n  )\n}\n\nexport const AtlasMessage = styled(Message)`\n  width: 6vw;\n  margin: 0 2vw !important;  \n  background: ${props => props.lightMode ? null : 'rgba(255, 255, 255, 0.05) !important'};\n  cursor: pointer;\n  @media (max-width: 1242px) {\n    margin: 0 1vw !important;\n    width: 9vw;\n  }\n\n  @media (max-width: 968px) {\n    margin: 0 0.5vw !important;\n    width: 11vw;\n  }\n\n  @media (max-width: 816px) {\n    margin: 0 !important;\n    padding: 0.5em !important;\n    width: 15vw;\n    height: 3vh;\n  }\n\n  @media (max-width: 676px) {\n    width: 18vw;\n    margin: 0 !important;\n    padding: 0em !important;\n  }\n`;\n\nexport const ListMessage = styled(Message)`\n  margin: 2vh auto !important;\n  background: ${props => props.lightMode ? 'white' : 'rgba(255, 255, 255, 0.05) !important'};\n`;\n\nfunction Atlas(props){\n  let style = null;\n  if(!props.lightMode){\n    style={boxShadow: \"0 0 0 1px white inset, 0 0 0 0 transparent\", color: \"white\"}\n  }\n  return (\n    <div className=\"atlas\">\n      <AtlasMessage lightMode={props.lightMode} className=\"atlas-item\" onClick={() => props.hook(\"Warning\")} color=\"red\" >Warning</AtlasMessage>\n      <AtlasMessage lightMode={props.lightMode} className=\"atlas-item\" onClick={() => props.hook(\"Suggestion\")} color=\"yellow\">Tips</AtlasMessage>\n      <AtlasMessage lightMode={props.lightMode} className=\"atlas-item\" onClick={() => props.hook(\"\")} style={style}>All</AtlasMessage>\n      <AtlasMessage lightMode={props.lightMode} className=\"atlas-item\" onClick={() => props.hook(\"Pattern\")} color=\"green\">Patterns</AtlasMessage>\n      <AtlasMessage lightMode={props.lightMode} className=\"atlas-item\" onClick={() => props.hook(\"Time\")} color=\"blue\">Times</AtlasMessage>\n    </div>\n  )\n}\n\nexport const SuggestionMessage = styled(Message)`\n  margin: 1vh auto !important;\n  background: ${props => props.lightMode ? 'white' : 'rgba(255, 255, 255, 0.05) !important'};\n`\n\nfunction Pattern(props){\n  return (\n    <ListMessage lightMode={props.lightMode} color=\"green\" className=\"pattern\">\n      <div>TOKEN: {props.pattern.token}</div>\n      <div>PATTERN: {props.pattern.pattern}</div>\n      {props.pattern.pattern == \"dictionary\" ? <div>DICTIONARY NAME: {props.pattern.pattern}</div> : null}\n    </ListMessage>\n  )\n}\n\nfunction Suggestion(props){\n  return (\n    <SuggestionMessage lightMode={props.lightMode} color=\"yellow\" className=\"issue\">\n      {props.body != undefined ? props.body : null}\n    </SuggestionMessage>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}