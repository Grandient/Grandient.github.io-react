{"version":3,"sources":["Generator.js","issues.js","table.js","App.js","Misc.js","Analyzer.js","dict.js","serviceWorker.js","index.js"],"names":["generatePassword","type","length","dict","phrase","str","randomWord","i","randomCharacter","console","log","charAt","passPhrase","keys","Object","result","Math","random","chars","charLen","floor","char","toUpperCase","hasOwnProperty","issues","string","types","typeIssue","every","v","problem","fix","checkType","push","lengthIssue","checkLength","wordIssue","letters","curLetters","split","word","join","pop","findWord","checkWord","patternIssue","pattern","jslrs","lrs","checkPattern","PassBar","props","className","style","barStyle","bits","alphadict","Header","Strength","id","name","placeholder","onChange","handleChange","children","Issue","comparePass","a","b","Number","analyzePassword","e","text","checkString","charpool","numeric","match","lowercase","uppercase","special","regexes","charsets","amounts","boolarray","total","amount","charset","pw_type","log2","pow","entropy","crack","comb","cracktime","combinations","x","f","parseFloat","toExponential","obj","strengths","strength","value","pw_strength","percentage","hue","quantize","interpolateRgb","passHue","width","background","addPassword","toFixed","financial","issue","App","state","inpass","outpass","incurrent","outcurrent","select","len","genBox","page","handleChangeStrength","bind","axios","get","then","response","txt","words","c","makeDict","data","catch","error","this","undefined","display","IssueList","map","val","target","substring","setState","temp","sort","forEach","element","rank","document","getElementById","input","pass","test","toLowerCase","React","Component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69141e1e.chunk.js","sourcesContent":["\r\n// # 1 Random Words \r\n// # 2 Code Words\r\n// # 3 Random Characters\r\nexport function generatePassword(type, length, dict, phrase){\r\n    let str = \"\";\r\n    switch (type){\r\n      case 1:\r\n        while(str.length < length){\r\n          str += randomWord(dict);\r\n        }\r\n        break;\r\n      case 2:\r\n        for (var i = 0; i < length; i++){\r\n          str += randomCharacter();\r\n        }\r\n        break;\r\n      case 3:\r\n        console.log(phrase)\r\n        for (var i = 0; i < length; i++){\r\n          console.log(phrase.charAt(i))\r\n          str += passPhrase(dict, phrase.charAt(i));\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return str;\r\n  }\r\n  \r\n  \r\nfunction randomWord(dict){\r\n    var keys = Object.keys(dict);\r\n    var result = keys[keys.length * Math.random() << 0];\r\n    console.log(result);\r\n    return result;\r\n}\r\n  \r\nfunction randomCharacter(){\r\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+';\r\n    var charLen = chars.length;\r\n    return chars.charAt(Math.floor(Math.random() * charLen));\r\n}\r\n\r\nfunction passPhrase(dict, char){\r\n  char = char.toUpperCase();\r\n  console.log(dict[char])\r\n  if(dict.hasOwnProperty(char)){\r\n    var result = dict[char][Math.floor(Math.random() * dict[char].length)];\r\n  }\r\n  console.log(result);\r\n  return result;\r\n}\r\n\r\n\r\n\r\n  ","import jslrs from 'js-longest-repeated-substring';\r\n\r\nexport function issues(string, types, length, dict) {\r\n  let issues = []\r\n  let typeIssue = checkType(types);\r\n  if(typeIssue != null){\r\n    issues.push(typeIssue)\r\n  }\r\n  let lengthIssue = checkLength(length)\r\n  if(lengthIssue != null){\r\n    issues.push(lengthIssue)\r\n  }\r\n  let wordIssue = checkWord(string, dict);\r\n  if(wordIssue != null){\r\n    issues.push(wordIssue);\r\n  }\r\n  let patternIssue = checkPattern(string);\r\n  if(patternIssue != null){\r\n    issues.push(patternIssue);\r\n  }\r\n  return issues;\r\n}\r\n\r\nfunction checkWord(string, dict){\r\n  let words = findWord(string, dict)\r\n  if(words != null){\r\n    return {problem:\"Your password contains a dictionary word.\", fix:\"Obfuscating words by using special characters or not using dictionary words.\"}\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction checkType(types){\r\n  let checkAll = types.every(v => v === types[0]);\r\n  if(checkAll){\r\n      return null;\r\n  }\r\n  let problem = \"Your password is missing these character types:\";\r\n  let fix = \"Add these character types your password:\";\r\n  if(types[0] == null){\r\n    problem += \" Numeric,\";\r\n    fix += \" Numeric,\"\r\n  }\r\n  if(types[1] == null){\r\n    problem += \" Lowercase,\";\r\n    fix += \" Lowercase,\";\r\n  }\r\n  if(types[2] == null){\r\n    problem += \" Uppercase,\";\r\n    fix += \" Uppercase,\";\r\n  }\r\n  if(types[3] == null){\r\n    problem += \" Special.\"\r\n    fix += \" Special.\";\r\n  }\r\n  return {problem: problem, fix: fix};\r\n}\r\n\r\nfunction checkPattern(string){\r\n  let pattern = jslrs.lrs(string);\r\n  if(pattern != null){\r\n    if(pattern.length >= 3){\r\n      return {problem:\"Your password has a pattern which will allow for easier password cracking.\", fix:\"Remove or obfuscate patterns that show up in your password.\"}\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction checkLength(length){\r\n  if(length >= 10){\r\n    return null; \r\n  } else if(length >= 20) {\r\n    return{problem:\"Your password is less greater than 19 characters.\", fix:\"This would be very difficult to remember without a passphrase or password manager.\"}\r\n  } else {\r\n    return{problem:\"Your password is less than 9 characters.\", fix:\"A strong password needs to contain more than 9 characters.\"}\r\n  }\r\n\r\n}\r\n\r\nfunction findWord(letters, dict) {\r\n  // Clone the array for manipulation\r\n  var curLetters = letters.split('');\r\n  //console.log(curLetters)\r\n  let word = \"\";\r\n  // Make sure the word is at least 3 letters long\r\n  while (curLetters.length > 2) {\r\n      // Get a word out of the existing letters\r\n      word = curLetters.join(\"\").toUpperCase();\r\n      // And see if it's in the dictionary\r\n      \r\n      if (dict[word]) {\r\n          // If it is, return that word\r\n          console.log(\"FOUND: \" + word);\r\n          return word;\r\n      }\r\n      // Otherwise remove another letter from the end\r\n      curLetters.pop();\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport const Pass = props => (\r\n  <tr className=\"passBox\">\r\n      <td>{props.name}</td>\r\n      <td>{props.strength}</td>\r\n      <td>{props.cracktime}</td>\r\n      <td className=\"tablecell\">\r\n        <PassBar barStyle={props.barStyle} bits={props.bits}></PassBar>\r\n      </td>\r\n      <td>{props.issues}</td>\r\n      <td>{props.rank}</td>\r\n  </tr>\r\n)\r\n\r\n\r\nexport const InitPass = props => (\r\n  <div className=\"passBox2\">\r\n    <p className=\"tablecell2\">\r\n      <PassBar barStyle={props.barStyle} bits={props.strength}></PassBar>\r\n    </p>\r\n    <p>{props.issues}</p>\r\n  </div>\r\n)\r\n\r\nexport const PassBar = props => (\r\n  <div className=\"TopBar\">\r\n    <div style={props.barStyle} className=\"LowerBar\">\r\n      {props.bits}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport const Title = props => (\r\n  <tr className=\"passBox\">\r\n    <th>Password </th>\r\n    <th>Strength </th>\r\n    <th>Cracktime (sec)</th> \r\n    <th>Score</th>\r\n    <th>Issues</th>\r\n    <th>Rank</th>\r\n  </tr>\r\n)\r\n\r\nexport const Generator = props => (\r\n  <div>\r\n    <h2>Generator</h2>\r\n    <p>There are three types of generation provided:</p>\r\n    <p>Generation by using random words.</p>\r\n    <p>Generation by using random characters.</p>\r\n    <p>Generation by using characters to create a passphrase.</p>\r\n  </div>\r\n)\r\n\r\n/*\r\n    let inputStyle = {\r\n      padding: \"10px\",\r\n      outline: \"none\"\r\n    }\r\n\r\n    let flexStyle = {\r\n      display: \"flex\",\r\n      flexDirection: \"row\"\r\n    }\r\n\r\n    let flexCol = {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      overflow: \"hidden\"\r\n    }\r\n    \r\n    const CurrPass = this.state.incurrent;\r\n    var CurrentPass;\r\n    if(CurrPass != null && CurrPass != \"\" && CurrPass != undefined){\r\n      let barhue = {\r\n        background: CurrPass.barStyle.background\r\n      }\r\n      CurrentPass = (\r\n            <InitPass strength={CurrPass.strength} barStyle={barhue} bits={CurrPass.bits}></InitPass>\r\n          )\r\n    } else {\r\n      CurrentPass = (\r\n        null\r\n      )\r\n    }\r\n\r\n    const GenList = this.state.outpass.map(pass => {\r\n      return (\r\n          <Pass key={pass.name} name={pass.name} strength={pass.strength} cracktime={pass.cracktime} barStyle={pass.barStyle} bits={pass.bits} rank={pass.rank} issues={pass.issues}></Pass>\r\n      )\r\n    })\r\n\r\n    const select = this.state.select;\r\n    var newGenerator;\r\n    if(select){\r\n      newGenerator = (\r\n        <div>\r\n          <Generator></Generator>\r\n          <div style={flexCol}>\r\n          <div>\r\n              <div style={flexStyle}>\r\n                <div>Length:</div>\r\n                <input type=\"range\" min=\"1\" max=\"5\" onChange={this.handleOutputChange} value={this.state.len}></input>\r\n                <output id=\"barnum\">{this.state.len} Word(s)</output>\r\n              </div>\r\n              <input id=\"outcurrent\" type=\"text\" onChange={this.hanldeChangeInputGenerator}></input>\r\n              <button name=\"1\"          onClick= {this.handleClickGenerator}>Generate</button>\r\n              \r\n          </div>\r\n          <select onChange={this.handleChangeGenerator} id=\"genSelect\" name=\"generators\" size=\"3\">\r\n              <option value=\"1\">Random Words</option>\r\n              <option value=\"2\">Random Characters</option>\r\n              <option value=\"3\">Passphrase</option>\r\n          </select>\r\n          </div>\r\n          <table>\r\n              <Title></Title>\r\n              {GenList}\r\n          </table>\r\n        </div>\r\n      )\r\n    } else {\r\n        newGenerator = (\r\n          <div>\r\n            <Generator></Generator>\r\n            <div style={flexCol}>\r\n              <div>\r\n                <p>Length:</p>\r\n                <input type=\"range\" min=\"1\" max=\"20\" onChange={this.handleOutputChange} value={this.state.len}></input>\r\n                <output id=\"barnum\">{this.state.len} Character(s)</output>\r\n              </div>\r\n              <div>\r\n                <button name=\"1\" onClick= {this.handleClickGenerator}>Generate</button>\r\n              </div>\r\n              <select onChange={this.handleChangeGenerator} id=\"genSelect\" name=\"generators\" size=\"3\">\r\n                  <option value=\"1\">Random Words</option>\r\n                  <option value=\"2\">Random Characters</option>\r\n                  <option value=\"3\">Passphrase</option>\r\n              </select>\r\n            </div>\r\n            <table>\r\n              <Title></Title>\r\n              {GenList}\r\n            </table>\r\n          </div>\r\n        )\r\n    }\r\n\r\n    const PassList = this.state.inpass.map(pass => {\r\n      return (\r\n          <Pass key={pass.name} name={pass.name} strength={pass.strength} cracktime={pass.cracktime} barStyle={pass.barStyle} bits={pass.bits} rank={pass.rank} issues={pass.issues}></Pass>\r\n      )\r\n    })\r\n*/","import React from 'react';\nimport {pw_type, pw_strength, combinations, entropy} from './Analyzer';\nimport {Guideline, expo, financial, checkString} from './Misc';\nimport {generatePassword} from './Generator';\nimport {issues} from './issues';\nimport {makeDict} from './dict';\nimport './App.css';\nimport {PassBar} from './table';\nimport {interpolateRgb, quantize} from \"d3-interpolate\";\nimport axios from 'axios';\n\n// Cracks per second.\nconst CPS = 588235;\n// Word lookup object.\nvar dict = {};\n// Object of letter arrays.\nvar alphadict = {}\n\nconst Header = props => (\n  <header>\n    <a className=\"logo\">PASSCHECKER</a>\n    <nav>\n      <a className=\"nav-element\">Strength</a>\n      <a className=\"nav-element\">Generator</a>\n      <a className=\"nav-element\">Compare</a>\n      <a className=\"nav-element\">Guidelines</a>\n    </nav>\n  </header>\n)\n\nconst Strength = props => (\n  <div className=\"Strength\">\n    <h2 className=\"strtitle\">PASSWORD STRENGTH</h2>\n    <div>\n      <input id=\"inputPass\" name=\"incurrent\" type=\"text\" placeholder=\"ENTER PASSWORD\" onChange={props.handleChange}></input>\n      <PassBar barStyle={props.barStyle} bits={props.bits}></PassBar>\n    </div>\n    <div className=\"IssueList\">\n      {props.children}\n    </div>\n  </div>\n)\n\nconst Issue = props => (\n  <div>\n    <div className=\"IssueTop\">{props.problem}</div>\n    <div className=\"IssueBottom\">{props.fix}</div>\n  </div>\n)\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inpass    : [],\n      outpass   : [], \n      issues    : [],\n      incurrent : \"\",\n      outcurrent: \"\",\n      select    : false,\n      len       : 10,\n      genBox    : \"\",\n      page      : 0\n    }\n\n    this.handleChangeStrength = this.handleChangeStrength.bind(this);\n    /*\n    this.handleClickLister = this.handleClickLister.bind(this);\n\n    this.handleChangeGenerator = this.handleChangeGenerator.bind(this);\n    this.handleClickGenerator = this.handleClickGenerator.bind(this);\n\n    this.handleOutputChange = this.handleOutputChange.bind(this);\n    this.handleChangeInputGenerator = this.handleChangeInputGenerator.bind(this);\n    */\n  }\n\n  componentDidMount() {\n    // Get the dictionary\n    axios.get(\"https://raw.githubusercontent.com/redbo/scrabble/master/dictionary.txt\")\n      .then(response => {\n        let result = null;\n        result = makeDict(response.data);\n        dict = result.dict;\n        alphadict = result.alphadict;\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  render(){\n    let value = this.state.incurrent;\n    if(value === undefined){\n      let noneStyle = {display: 'none'};\n      let obj = {barStyle: noneStyle}\n      value = obj;\n    } \n\n    let issues = value.issues;\n    console.log(issues);\n    var IssueList = null;\n    if(issues != undefined && issues.length != []){\n      IssueList = issues.map(issue => {\n        return (\n            <Issue problem={issue.problem} fix={issue.fix}></Issue>\n        )\n      })\n    } \n\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <Strength handleChange={this.handleChangeStrength} barStyle={value.barStyle} bits={value.bits}>\n          {IssueList}\n        </Strength>\n      </div>\n    );\n  }\n\n  handleChangeStrength(e) {\n    //console.log(\"Handling change. (Lister) \")\n    var val = e.target.value;\n    if(val.length > 26){\n      val = val.substring(0, 26);\n      e.target.value = val;\n    }\n    const value = analyzePassword(val);\n    this.setState({\n      ...this.state,\n      [e.target.name]: value\n    });\n  }\n\n  handleClickLister(e){\n    console.log(\"Handling click. (Lister)\");\n    if(this.state.incurrent != \"\" && this.state.incurrent != null){\n      let temp = [...this.state.inpass, this.state.incurrent];\n      temp.sort(comparePass);\n      let i = 1;\n      temp.forEach(function (element) {\n        element.rank = i;\n        i++;\n      });\n      this.setState({\n          ...this.state,\n          inpass: temp,\n          incurrent: null\n      });\n    }\n    let input = document.getElementById(\"inputPass\");\n    input.value = \"\";\n  }\n\n  handleOutputChange(e){\n    this.setState({\n      ...this.state,\n      len: e.target.value\n  });\n  }\n\n  handleChangeInputGenerator(e){\n    if(e.value.length > this.state.len){\n      e.value = e.value.substring(0, this.state.len)\n    }\n  }\n\n  handleChangeGenerator(){\n    console.log(\"Handling change. (Generator) \")\n    let e = document.getElementById(\"genSelect\");\n    if(e.value == \"3\"){\n      this.setState({\n        ...this.state,\n        select: true,\n        len: 3\n      });\n\n    } else {\n      this.setState({\n        ...this.state,\n        select: false,\n        len: 10\n      });\n    }\n  }\n\n  handleClickGenerator(){\n    console.log(\"Handling click. (Generator)\");\n    let e = document.getElementById(\"genSelect\");\n    let input = document.getElementById(\"outcurrent\")\n    let pass = \"\";\n    switch(e.value){\n      case \"1\":\n        pass = generatePassword(1, this.state.len, dict, null);\n        break;\n      case \"2\":\n        pass = generatePassword(2, this.state.len, dict, null);\n        break;\n      case \"3\":\n        if(/^[a-z]+$/i.test(input.value)){\n          pass = generatePassword(3, this.state.len, alphadict, input.value);\n        } else {\n          console.log(\"ERROR, ONLY LETTERS ALLOWED\")\n        }\n        break;\n      default:\n        console.log(\"Case not found.\")\n        break;\n    }\n    let val = pass.toLowerCase();\n    if(val.length > 20){\n      val = val.substring(0, 20);\n    }\n    const value = analyzePassword(val);\n    if(value != undefined){\n      this.setState({\n        ...this.state,\n        outcurrent: \"\",\n        outpass: [...this.state.outpass, value]\n      });\n    }\n  }\n\n  handlePageChange(){\n\n  }\n}\n\n// Sort passwords base on length\nfunction comparePass(a, b){\n  console.log(typeof(a.bits))\n  if(Number(a.bits) < Number(b.bits)){\n    return 1;\n  }\n  if(Number(a.bits) > Number(b.bits)){\n    return -1;\n  }\n  return 0;\n}\n\n// Analyze Password\nfunction analyzePassword(e){\n  if(e != null){\n    let text = e;\n    if(checkString(text)){\n      let charpool = pw_type(text);\n      let length = text.length;\n      let bits = entropy(length, charpool.amount);\n      let comb = combinations(length, charpool.amount);\n      let crack = cracktime(comb)\n      crack = expo(crack, 2);\n      let obj = pw_strength(bits);\n      let style = addPassword(obj.value);\n      bits = financial(bits);\n      let issue = issues(text, charpool.types, length, dict);\n      return {name: text, strength: obj.strength, cracktime: crack, bits:bits,barStyle: style, issues: issue};\n    }\n  }\n}\n\n// Password Hue\nfunction passHue(value){\n  let colors = quantize(interpolateRgb(\"red\", \"green\"), 5);\n  return colors[value]\n}\n\n// Passbar style\nfunction addPassword(value){\n  let percentage = 25*(value+1);\n  let hue = passHue(value);\n  let style = {\n    width: percentage + \"%\",\n    background: hue\n  }\n  return style;\n}\n\n// Amount of time in seconds until crack.\nfunction cracktime(comb){\n  return comb/CPS;\n}\n\n\n\nexport default App;\n","import React from 'react';\r\n\r\nexport const Guideline = props => (\r\n<div className=\"Guideline\">\r\n    <h2>Guidelines</h2>\r\n    <div>\r\n        <ul>Use a minimum password length of 10 or more characters if permitted.</ul>\r\n        <ul>Include lowercase and uppercase alphabetic characters, numbers and symbols if permitted.</ul>\r\n        <ul>Avoid character repetition, keyboard patterns, dictionary words, letter or number sequences.</ul>\r\n    </div>\r\n</div>\r\n)\r\n\r\n\r\nexport const Problems = props => (\r\n<div>\r\n    <h1>Problems</h1>\r\n    <div>\r\n        <ul>Default passwords (as supplied by the system vendor and meant to be changed at installation time): password, default, admin, guest, etc. Lists of default passwords are widely available on the internet.</ul>\r\n        <ul>Dictionary words: chameleon, RedSox, sandbags, bunnyhop!, IntenseCrabtree, etc., including words in non-English dictionaries.</ul>\r\n        <ul>Words with numbers appended: password1, deer2000, john1234, etc., can be easily tested automatically with little lost time.</ul>\r\n        <ul>Words with simple obfuscation: p@ssw0rd, l33th4x0r, g0ldf1sh, etc., can be tested automatically with little additional effort. For example, a domain administrator password compromised in the DigiNotar attack was reportedly Pr0d@dm1n.</ul>\r\n        <ul>Doubled words: crabcrab, stopstop, treetree, passpass, etc.</ul>\r\n        <ul>Common sequences from a keyboard row: qwerty, 123456, asdfgh, fred, etc.</ul>\r\n        <ul>Numeric sequences based on well known numbers such as 911 (9-1-1, 9/11), 314159... (pi), 27182... (e), 112 (1-1-2), etc.</ul>\r\n        <ul>Identifiers: jsmith123, 1/1/1970, 555–1234, one's username, etc.</ul>\r\n        <ul>Weak passwords in non-English languages, such as contraseña (Spanish) and ji32k7au4a83 (bopomofo keyboard encoding from Chinese)</ul>\r\n        <ul>Anything personally related to an individual: license plate number, Social Security number, current or past telephone numbers, student ID, current address, previous addresses, birthday, sports team, relative's or pet's names/nicknames/birthdays/initials, etc., can easily be tested automatically after a simple investigation of a person's details.</ul>\r\n        <ul>Dates: dates follow a pattern and make your password weak.</ul>\r\n    </div>\r\n</div>\r\n)\r\n\r\n\r\nexport function expo(x, f) {\r\n  return Number.parseFloat(x).toExponential(f);\r\n}\r\n\r\nexport function financial(x) {\r\n  return Number.parseFloat(x).toFixed(2);\r\n}\r\n\r\n// Check if string is valid.\r\nexport function checkString(string){\r\n  if(string == null) {\r\n    console.log(\"String is null.\")\r\n  } else if(string == \"\") {\r\n    console.log(\"String is empty.\")\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\n","// Calculates entropy.\r\nexport function entropy(length, charpool) {\r\n    return Math.log2(Math.pow(charpool, length));\r\n}\r\n\r\n// Calculates the number of combinations given a length and a charset.\r\nexport function combinations(length, charpool) {\r\n    return Math.pow(charpool, length);\r\n}\r\n\r\n// Returns the password type given a string.\r\nexport function pw_type(string){\r\n    // Matchs numbers.\r\n    let numeric = string.match(/[1-9]/g);\r\n    // Match lowercase.\r\n    let lowercase = string.match(/[a-z]/g);\r\n    // Match uppercase.\r\n    let uppercase = string.match(/[A-Z]/g);\r\n    // Match special characters.\r\n    let special = string.match(/[!@#\\$%\\^\\&*\\)\\(+=._-]/g);\r\n\r\n    // Array of regexes, charsets and amounts.\r\n    let regexes = [numeric, lowercase, uppercase, special];\r\n    let charsets = [\"Numeric\", \"Alphabetic Case-Insensitive\", \"Alphabetic Case-Sensitive\" , \"Alphanumeric Case-Insensitive\", \"Alphanumeric Case-Sensitive\", \"Alphanumeric + Special characters\"]\r\n    let amounts = [10, 26, 26, 8];\r\n\r\n    // Calculates the length of the charset\r\n    let boolarray = [];\r\n    let total = 0;\r\n    let charset = \"\";\r\n    for (let i = 0; i < amounts.length; i++){\r\n        if(regexes[i]){\r\n            boolarray.push(true);\r\n            total += amounts[i];\r\n        } else {\r\n            boolarray.push(false);\r\n        }\r\n    }\r\n\r\n    // Selects the charset.\r\n    if(special){\r\n        charset = charsets[charsets.length-1];\r\n    } else {\r\n        if(lowercase && uppercase && numeric){ \r\n            charset = charsets[charsets.length-2];\r\n        } else {\r\n            if(lowercase && numeric || uppercase && numeric){\r\n                charset = charsets[charsets.length-3];\r\n            } else {\r\n                if(lowercase && uppercase){\r\n                charset = charsets[charsets.length-4];\r\n                } else {\r\n                    if(lowercase || uppercase){\r\n                        charset = charsets[charsets.length-5];\r\n                    } else {\r\n                        charset = charsets[charsets.length-6];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {amount:total, charset:charset, types: regexes}\r\n}\r\n\r\n\r\nexport function pw_strength(entropy){\r\n    let strengths = [\"Very Weak\", \"Weak\", \"Reasonable\", \"Strong\", \"Very Strong\"]\r\n    if(entropy < 28){\r\n        return {strength:strengths[0], value:0};\r\n    } else if(entropy > 28 && entropy < 35){\r\n        return {strength:strengths[1], value:1};\r\n    } else if(entropy > 35 && entropy < 59){\r\n        return {strength:strengths[2], value:2};\r\n    } else if(entropy > 59){\r\n        return {strength:strengths[3], value:3};\r\n    } else {\r\n        return {strength:strengths[3], value:3};\r\n    }\r\n}\r\n\r\n","export function makeDict(txt){\r\n  // Get an array of all the word\r\n  var words = txt.split(\"\\n\");\r\n  // And add them as properties to the dictionary lookup\r\n  // This will allow for fast lookups later\r\n  let dict = {};\r\n  let alphadict = {};\r\n  for (var i = 0; i < words.length; i++ ) {\r\n    dict[words[i]] = true;\r\n    let c = words[i][0];\r\n    if(!alphadict.hasOwnProperty(c)){\r\n      alphadict[c] = [words[i]];\r\n    } else {\r\n      alphadict[c] = [...alphadict[c], words[i]];\r\n    }\r\n  }\r\n  return {dict:dict, alphadict:alphadict};\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}