{"version":3,"sources":["Misc.js","Generator.js","issues.js","table.js","strength.js","App.js","dict.js","Analyzer.js","serviceWorker.js","index.js"],"names":["Guideline","props","className","Problems","generatePassword","type","length","dict","phrase","str","randomWord","i","randomCharacter","passPhrase","charAt","Generator","onClick","onclick","id","min","max","onChange","onchange","value","len","selectonchange","name","size","hint","generated","keys","Object","Math","random","chars","charLen","floor","char","toUpperCase","console","log","hasOwnProperty","result","issues","string","types","typeIssue","every","fix","problem","checkType","push","lengthIssue","checkLength","wordIssue","letters","curLetters","split","word","join","pop","findWord","checkWord","patternIssue","pattern","jslrs","lrs","checkPattern","PassBar","style","barStyle","bits","Strength","placeholder","handleChange","handleclick","class","children","Issue","Header","Compare","App","state","password","hide","genSelect","page","handleChangeStrength","bind","handlePageChange","handleClickGenerator","handleLengthChange","handleTypeChange","handleClickHide","axios","get","then","response","txt","words","alphadict","c","undefined","makeDict","data","catch","error","this","body","handleClick","display","IssueList","map","issue","buildStrength","e","val","target","substring","text","checkString","charpool","numeric","match","lowercase","uppercase","special","regexes","charsets","amounts","boolarray","total","amount","charset","pw_type","log2","pow","entropy","crack","comb","cracktime","combinations","x","f","Number","parseFloat","toExponential","obj","strengths","strength","pw_strength","percentage","hue","quantize","interpolateRgb","passHue","width","background","addPassword","toFixed","financial","analyzePassword","setState","document","getElementById","pass","innerText","React","Component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1369ce76.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Guideline = props => (\r\n<div className=\"Center\">\r\n    <h2 className=\"GuideTitle\">Guidelines</h2>\r\n    <ul className=\"centerBlack\">\r\n        <li>Use a minimum password length of 10 or more characters if permitted.</li>\r\n        <li>Include lowercase and uppercase alphabetic characters, numbers and symbols if permitted.</li>\r\n        <li>Avoid character repetition, keyboard patterns, dictionary words, letter or number sequences.</li>\r\n    </ul>\r\n</div>\r\n)\r\n\r\n\r\nexport const Problems = props => (\r\n<div className=\"Center\">\r\n    <h2 className=\"GuideTitle\">Problems</h2>\r\n    <ul className=\"centerBlack\">\r\n        <li>Default passwords: password, default, admin, guest, etc.</li>\r\n        <li>Dictionary words: chameleon, RedSox, sandbags, bunnyhop!, IntenseCrabtree, etc.</li>\r\n        <li>Words with numbers appended: password1, deer2000, john1234, etc.</li>\r\n        <li>Words with simple obfuscation: p@ssw0rd, l33th4x0r, g0ldf1sh, etc.</li>\r\n        <li>Doubled words: crabcrab, stopstop, treetree, passpass, etc.</li>\r\n        <li>Common sequences from a keyboard row: qwerty, 123456, asdfgh, fred, etc.</li>\r\n        <li>Numeric sequences based on well known numbers such as 911 (9-1-1, 9/11), 314159... (pi), 27182... (e), 112 (1-1-2), etc.</li>\r\n        <li>Identifiers: jsmith123, 1/1/1970, 555–1234, one's username, etc.</li>\r\n        <li>Personally Identifiable Information (PII): license plate number, Social Security number, current or past telephone numbers, student ID, current address, etc.</li>\r\n        <li>Dates: dates follow a pattern and make your password weak.</li>\r\n    </ul>\r\n</div>\r\n)\r\n\r\n\r\nexport function expo(x, f) {\r\n  return Number.parseFloat(x).toExponential(f);\r\n}\r\n\r\nexport function financial(x) {\r\n  return Number.parseFloat(x).toFixed(2);\r\n}\r\n\r\n// Check if string is valid.\r\nexport function checkString(string){\r\n  if(string == null) {\r\n    console.log(\"String is null.\")\r\n  } else if(string == \"\") {\r\n    console.log(\"String is empty.\")\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\n// # 1 Random Words \r\n// # 2 Code Words\r\n// # 3 Random Characters\r\nexport function generatePassword(type, length, dict, phrase){\r\n    let str = \"\";\r\n    switch (type){\r\n      case 1:\r\n        while(str.length < length){\r\n          str += randomWord(dict);\r\n        }\r\n        break;\r\n      case 2:\r\n        for (var i = 0; i < length; i++){\r\n          str += randomCharacter();\r\n        }\r\n        break;\r\n      case 3:\r\n        for (var i = 0; i < length; i++){\r\n          str += passPhrase(dict, phrase.charAt(i));\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return str;\r\n  }\r\nexport const Generator = props => (\r\n  <div className=\"Center\">\r\n    <h2 className=\"GeneratorTitle\">GENERATE PASSWORD</h2>\r\n    <div>\r\n      <button onClick={props.onclick} className=\"GeneratorButton\">GENERATE</button>\r\n      <input id=\"lenslide\" className=\"slider\" type=\"range\" min=\"8\" max=\"30\" onChange={props.onchange} value={props.len}></input>\r\n      <p className=\"lengthText\">PASSWORD LENGTH: {props.len} </p>\r\n      <select onChange={props.selectonchange} id=\"genSelect\" name=\"generators\" size=\"2\">\r\n          <option value=\"0\">Random Words</option>\r\n          <option value=\"1\">Random Characters</option>\r\n      </select>\r\n    </div>\r\n    <h2 hint=\"RESULT\"className=\"GeneratorOutput\">{props.generated}</h2>\r\n  </div>\r\n)  \r\n\r\n\r\nfunction randomWord(dict){\r\n    var keys = Object.keys(dict);\r\n    var result = keys[keys.length * Math.random() << 0];\r\n    return result;\r\n}\r\n  \r\nfunction randomCharacter(){\r\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+';\r\n    var charLen = chars.length;\r\n    return chars.charAt(Math.floor(Math.random() * charLen));\r\n}\r\n\r\nfunction passPhrase(dict, char){\r\n  char = char.toUpperCase();\r\n  console.log(dict[char])\r\n  if(dict.hasOwnProperty(char)){\r\n    var result = dict[char][Math.floor(Math.random() * dict[char].length)];\r\n  }\r\n  return result;\r\n}\r\n\r\n\r\n\r\n  ","import jslrs from 'js-longest-repeated-substring';\r\n\r\nexport function issues(string, types, length, dict) {\r\n  let issues = []\r\n  let typeIssue = checkType(types);\r\n  if(typeIssue != null){\r\n    issues.push(typeIssue)\r\n  }\r\n  let lengthIssue = checkLength(length)\r\n  if(lengthIssue != null){\r\n    issues.push(lengthIssue)\r\n  }\r\n  let wordIssue = checkWord(string, dict);\r\n  if(wordIssue != null){\r\n    issues.push(wordIssue);\r\n  }\r\n  let patternIssue = checkPattern(string);\r\n  if(patternIssue != null){\r\n    issues.push(patternIssue);\r\n  }\r\n  return issues;\r\n}\r\n\r\nfunction checkWord(string, dict){\r\n  let words = findWord(string, dict)\r\n  if(words != null){\r\n    return {problem:\"Dictionary Word\", fix:\"Obfuscating words by using special characters or not using dictionary words.\"}\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction checkType(types){\r\n  let checkAll = types.every(function(i) { return i !== null; });\r\n  if(checkAll){\r\n      return null;\r\n  }\r\n  let problem = \"Character Variety\";\r\n  let fix = \"Add these character types your password:\";\r\n  if(types[0] == null){\r\n    fix += \" Numeric\"\r\n  }\r\n  if(types[1] == null){\r\n    if(types[0] != null){\r\n      fix += \", \"\r\n    }\r\n    fix += \" Lowercase\";\r\n  }\r\n  if(types[2] == null){\r\n    if(types[1] != null){\r\n      fix += \", \"\r\n    }\r\n    fix += \" Uppercase\";\r\n  }\r\n  if(types[3] == null){\r\n    if(types[2] != null){\r\n      fix += \", \"\r\n    }\r\n    fix += \" Special\";\r\n  }\r\n  fix += \".\";\r\n  return {problem: problem, fix: fix};\r\n}\r\n\r\nfunction checkPattern(string){\r\n  let pattern = jslrs.lrs(string);\r\n  if(pattern != null){\r\n    if(pattern.length >= 3){\r\n      return {problem:\"Pattern\", fix:\"Remove or obfuscate patterns that show up in your password.\"}\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction checkLength(length){\r\n  if(length >= 10){\r\n    return null; \r\n  } else if(length >= 20) {\r\n    return{problem:\"Length\", fix:\"This would be very difficult to remember without a passphrase or password manager.\"}\r\n  } else {\r\n    return{problem:\"Length\", fix:\"A strong password needs to contain more than 9 characters.\"}\r\n  }\r\n\r\n}\r\n\r\nfunction findWord(letters, dict) {\r\n  // Clone the array for manipulation\r\n  var curLetters = letters.split('');\r\n  //console.log(curLetters)\r\n  let word = \"\";\r\n  // Make sure the word is at least 3 letters long\r\n  while (curLetters.length > 2) {\r\n      // Get a word out of the existing letters\r\n      word = curLetters.join(\"\").toUpperCase();\r\n      // And see if it's in the dictionary\r\n      \r\n      if (dict[word]) {\r\n          // If it is, return that word\r\n          return word;\r\n      }\r\n      // Otherwise remove another letter from the end\r\n      curLetters.pop();\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport const Pass = props => (\r\n  <tr className=\"passBox\">\r\n      <td>{props.name}</td>\r\n      <td>{props.strength}</td>\r\n      <td>{props.cracktime}</td>\r\n      <td className=\"tablecell\">\r\n        <PassBar barStyle={props.barStyle} bits={props.bits}></PassBar>\r\n      </td>\r\n      <td>{props.issues}</td>\r\n      <td>{props.rank}</td>\r\n  </tr>\r\n)\r\n\r\n\r\nexport const InitPass = props => (\r\n  <div className=\"passBox2\">\r\n    <p className=\"tablecell2\">\r\n      <PassBar barStyle={props.barStyle} bits={props.strength}></PassBar>\r\n    </p>\r\n    <p>{props.issues}</p>\r\n  </div>\r\n)\r\n\r\nexport const PassBar = props => (\r\n  <div className=\"TopBar\">\r\n    <div style={props.barStyle} className=\"LowerBar\">\r\n      {props.bits}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport const Title = props => (\r\n  <tr className=\"passBox\">\r\n    <th>Password </th>\r\n    <th>Strength </th>\r\n    <th>Cracktime (sec)</th> \r\n    <th>Score</th>\r\n    <th>Issues</th>\r\n    <th>Rank</th>\r\n  </tr>\r\n)\r\n\r\nexport const Generator = props => (\r\n  <div>\r\n    <h2>Generator</h2>\r\n    <p>There are three types of generation provided:</p>\r\n    <p>Generation by using random words.</p>\r\n    <p>Generation by using random characters.</p>\r\n    <p>Generation by using characters to create a passphrase.</p>\r\n  </div>\r\n)\r\n\r\n/*\r\n    let inputStyle = {\r\n      padding: \"10px\",\r\n      outline: \"none\"\r\n    }\r\n\r\n    let flexStyle = {\r\n      display: \"flex\",\r\n      flexDirection: \"row\"\r\n    }\r\n\r\n    let flexCol = {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      overflow: \"hidden\"\r\n    }\r\n    \r\n    const CurrPass = this.state.incurrent;\r\n    var CurrentPass;\r\n    if(CurrPass != null && CurrPass != \"\" && CurrPass != undefined){\r\n      let barhue = {\r\n        background: CurrPass.barStyle.background\r\n      }\r\n      CurrentPass = (\r\n            <InitPass strength={CurrPass.strength} barStyle={barhue} bits={CurrPass.bits}></InitPass>\r\n          )\r\n    } else {\r\n      CurrentPass = (\r\n        null\r\n      )\r\n    }\r\n\r\n    const GenList = this.state.outpass.map(pass => {\r\n      return (\r\n          <Pass key={pass.name} name={pass.name} strength={pass.strength} cracktime={pass.cracktime} barStyle={pass.barStyle} bits={pass.bits} rank={pass.rank} issues={pass.issues}></Pass>\r\n      )\r\n    })\r\n\r\n    const select = this.state.select;\r\n    var newGenerator;\r\n    if(select){\r\n      newGenerator = (\r\n        <div>\r\n          <Generator></Generator>\r\n          <div style={flexCol}>\r\n          <div>\r\n              <div style={flexStyle}>\r\n                <div>Length:</div>\r\n                <input type=\"range\" min=\"1\" max=\"5\" onChange={this.handleOutputChange} value={this.state.len}></input>\r\n                <output id=\"barnum\">{this.state.len} Word(s)</output>\r\n              </div>\r\n              <input id=\"outcurrent\" type=\"text\" onChange={this.hanldeChangeInputGenerator}></input>\r\n              <button name=\"1\"          onClick= {this.handleClickGenerator}>Generate</button>\r\n              \r\n          </div>\r\n          <select onChange={this.handleChangeGenerator} id=\"genSelect\" name=\"generators\" size=\"3\">\r\n              <option value=\"1\">Random Words</option>\r\n              <option value=\"2\">Random Characters</option>\r\n              <option value=\"3\">Passphrase</option>\r\n          </select>\r\n          </div>\r\n          <table>\r\n              <Title></Title>\r\n              {GenList}\r\n          </table>\r\n        </div>\r\n      )\r\n    } else {\r\n        newGenerator = (\r\n          <div>\r\n            <Generator></Generator>\r\n            <div style={flexCol}>\r\n              <div>\r\n                <p>Length:</p>\r\n                <input type=\"range\" min=\"1\" max=\"20\" onChange={this.handleOutputChange} value={this.state.len}></input>\r\n                <output id=\"barnum\">{this.state.len} Character(s)</output>\r\n              </div>\r\n              <div>\r\n                <button name=\"1\" onClick= {this.handleClickGenerator}>Generate</button>\r\n              </div>\r\n              <select onChange={this.handleChangeGenerator} id=\"genSelect\" name=\"generators\" size=\"3\">\r\n                  <option value=\"1\">Random Words</option>\r\n                  <option value=\"2\">Random Characters</option>\r\n                  <option value=\"3\">Passphrase</option>\r\n              </select>\r\n            </div>\r\n            <table>\r\n              <Title></Title>\r\n              {GenList}\r\n            </table>\r\n          </div>\r\n        )\r\n    }\r\n\r\n    const PassList = this.state.inpass.map(pass => {\r\n      return (\r\n          <Pass key={pass.name} name={pass.name} strength={pass.strength} cracktime={pass.cracktime} barStyle={pass.barStyle} bits={pass.bits} rank={pass.rank} issues={pass.issues}></Pass>\r\n      )\r\n    })\r\n*/","import React from 'react';\r\nimport {PassBar} from './table';\r\nexport const Strength = props => (\r\n  <div className=\"Center\">\r\n    <h2 className=\"strtitle\">PASSWORD STRENGTH</h2>\r\n    <div>\r\n      <div className=\"rowflex\">\r\n        <input id=\"inputPass\" name=\"incurrent\" type={props.type} placeholder=\"ENTER PASSWORD\" onChange={props.handleChange}></input>\r\n        <button onClick={props.handleclick} id=\"hidebutton\" class=\"strButton\">HIDE</button>\r\n      </div>\r\n      <PassBar barStyle={props.barStyle} bits={props.bits}></PassBar>\r\n    </div>\r\n    <div className=\"IssueList\">\r\n      {props.children}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport const Issue = props => (\r\n  <div>\r\n    <div className=\"IssueTop\">{props.problem}</div>\r\n    <div className=\"IssueBottom\">{props.fix}</div>\r\n  </div>\r\n)\r\n\r\nexport function buildStrength(value, handleChangeStrength, hide, handleClick){\r\n    if(value === undefined){\r\n        let noneStyle = {display: 'none'};\r\n        let obj = {barStyle: noneStyle}\r\n        value = obj;\r\n    } \r\n    let issues = value.issues;\r\n    var IssueList = null;\r\n    if(issues != undefined && issues.length != []){\r\n        IssueList = issues.map(issue => {\r\n          return (\r\n              <Issue problem={issue.problem} fix={issue.fix}></Issue>\r\n          )\r\n        })\r\n    } \r\n    \r\n    return <Strength handleChange={handleChangeStrength} type={hide} handleclick={handleClick} barStyle={value.barStyle} bits={value.bits}>\r\n                {IssueList}\r\n            </Strength>\r\n}\r\n\r\n","import React from 'react';\nimport {pw_type, pw_strength, combinations, entropy} from './Analyzer';\nimport {Guideline, Problems, expo, financial, checkString} from './Misc';\nimport {generatePassword, Generator} from './Generator';\nimport {issues} from './issues';\nimport {makeDict} from './dict';\nimport {interpolateRgb, quantize} from \"d3-interpolate\";\nimport {buildStrength} from './strength';\nimport axios from 'axios';\n\nimport './App.css';\nimport './Generator.css';\nimport './strength.css';\nimport './Guidelines.css';\nimport './compare.css';\n\n// Cracks per second.\nconst CPS = 588235;\n// Word lookup object.\nvar dict = {};\n// Object of letter arrays.\nvar alphadict = {}\n\nconst Header = props => (\n  <header>\n    <p onClick={props.onclick} className=\"logo\">PASSCHECKER</p>\n    <nav>\n      <p onClick={props.onclick} className=\"nav-element\">Strength</p>\n      <p onClick={props.onclick} className=\"nav-element\">Generator</p>\n      <p onClick={props.onclick} className=\"nav-element\">Compare</p>\n      <p onClick={props.onclick} className=\"nav-element\">Guidelines</p>\n    </nav>\n  </header>\n)\n\nconst Compare = props => (\n  <div className=\"Center\">\n    <h2 className=\"strtitle\">COMPARE PASSWORDS</h2>\n    <div>\n      <input id=\"pass1\" type=\"text\" placeholder=\"ENTER PASSWORD\"></input>\n      <input id=\"pass2\" type=\"text\" placeholder=\"ENTER PASSWORD\"></input>\n    </div>\n  </div>\n)\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password  : \"\",\n      generated : \"\",\n      hide      : 0,\n      len       : 16,\n      genSelect : \"0\",\n      page      : 0\n    }\n\n    this.handleChangeStrength = this.handleChangeStrength.bind(this);\n    this.handlePageChange = this.handlePageChange.bind(this);\n    this.handleClickGenerator = this.handleClickGenerator.bind(this);\n    this.handleLengthChange = this.handleLengthChange.bind(this);\n    this.handleTypeChange = this.handleTypeChange.bind(this);\n    this.handleClickHide = this.handleClickHide.bind(this);\n  }\n\n  componentDidMount() {\n    // Get the dictionary\n    axios.get(\"http://gavingosling.me/data/dictionary.txt\")\n      .then(response => {\n        let result = null;\n        result = makeDict(response.data);\n        dict = result.dict;\n        alphadict = result.alphadict;\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  render(){\n    let page = this.state.page;\n    let body = null;\n    if(page == 0){\n      let value = this.state.password;\n      body = buildStrength(value, this.handleChangeStrength, this.state.hide, this.handleClickHide);\n    }\n\n    if(page == 1){\n      body = <Generator selectonchange = {this.handleTypeChange} \n                        onclick={this.handleClickGenerator} \n                        generated={this.state.generated} \n                        onchange={this.handleLengthChange} \n                        len={this.state.len}>\n             </Generator>\n    }\n\n    if(page == 2){\n      body = <Compare></Compare>\n    }\n\n    if(page == 3){\n      body = <div>\n              <Guideline></Guideline>\n              <Problems></Problems>\n            </div>\n    }\n\n    return (\n      <div className=\"App\">\n        <Header onclick={this.handlePageChange}></Header>\n        {body}\n      </div>\n    );\n  }\n\n  handleChangeStrength(e) {\n    var val = e.target.value;\n    if(val.length > 26){\n      val = val.substring(0, 26);\n      e.target.value = val;\n    }\n    const value = analyzePassword(val);\n    this.setState({\n      ...this.state,\n      password: value\n    });\n  }\n\n  handleClickHide(){\n    var x = document.getElementById(\"inputPass\");\n    let val = null;\n    if (x.type === \"password\") {\n      val = \"text\";\n    } else {\n      val = \"password\";\n    }\n    this.setState({\n      ...this.state,\n      hide: val\n    });\n  }\n\n  handleClickGenerator(){\n    let pass = \"\";\n    switch(this.state.genSelect){\n      case \"0\":\n        pass = generatePassword(1, this.state.len, dict, null);\n        break;\n      case \"1\":\n        pass = generatePassword(2, this.state.len, dict, null);\n        break;\n      default:\n        console.log(\"Case not found.\")\n        break;\n    }\n    this.setState({\n      ...this.state,\n      generated: pass\n    });\n  }\n\n  handleLengthChange(e){\n    let val = document.getElementById(\"lenslide\").value;\n    this.setState({\n      ...this.state,\n      len: val\n    });\n  }\n\n  handleTypeChange(e){\n    let val = document.getElementById(\"genSelect\").value;\n    console.log(val);\n    this.setState({\n      ...this.state,\n      genSelect: val\n    });\n  }\n\n  /*\n  case \"3\":\n        if(/^[a-z]+$/i.test(input.value)){\n          pass = generatePassword(3, this.state.len, alphadict, input.value);\n        } else {\n          console.log(\"ERROR, ONLY LETTERS ALLOWED\")\n        }\n  */\n\n  handlePageChange(e){\n    const val = e.target.innerText;\n    var page = null;\n    switch(val){\n      case \"PassChecker\":\n        page = 0;\n        break;\n      case \"Strength\":\n        page = 0;\n        break;\n      case \"Generator\":\n        page = 1;\n        break;\n      case \"Compare\":\n        page = 2;\n        break;\n      case \"Guidelines\":\n        page = 3;\n        break;\n      default:\n        page = 0;\n        break;\n    }\n    this.setState({\n      ...this.state,\n      page: page\n    });\n  }\n}\n\n// Sort passwords base on length\nfunction comparePass(a, b){\n  console.log(typeof(a.bits))\n  if(Number(a.bits) < Number(b.bits)){\n    return 1;\n  }\n  if(Number(a.bits) > Number(b.bits)){\n    return -1;\n  }\n  return 0;\n}\n\n// Analyze Password\nfunction analyzePassword(e){\n  if(e != null){\n    let text = e;\n    if(checkString(text)){\n      let charpool = pw_type(text);\n      let length = text.length;\n      let bits = entropy(length, charpool.amount);\n      let comb = combinations(length, charpool.amount);\n      let crack = cracktime(comb)\n      crack = expo(crack, 2);\n      let obj = pw_strength(bits);\n      let style = addPassword(obj.value);\n      bits = financial(bits);\n      let issue = issues(text, charpool.types, length, dict);\n      return {name: text, strength: obj.strength, cracktime: crack, bits:bits,barStyle: style, issues: issue};\n    }\n  }\n}\n\n// Password Hue\nfunction passHue(value){\n  let colors = quantize(interpolateRgb(\"red\", \"green\"), 5);\n  return colors[value]\n}\n\n// Passbar style\nfunction addPassword(value){\n  let percentage = 25*(value+1);\n  let hue = passHue(value);\n  let style = {\n    width: percentage + \"%\",\n    background: hue\n  }\n  return style;\n}\n\n// Amount of time in seconds until crack.\nfunction cracktime(comb){\n  return comb/CPS;\n}\n\n\n\nexport default App;\n","export function makeDict(txt){\r\n  // Get an array of all the word\r\n  var words = txt.split(\"\\n\");\r\n  // And add them as properties to the dictionary lookup\r\n  // This will allow for fast lookups later\r\n  let dict = {};\r\n  let alphadict = {};\r\n\r\n  for (var i = 0; i < words.length; i++ ) {\r\n    dict[words[i]] = true;\r\n    let c = words[i][0];\r\n    if(alphadict[c] == undefined){\r\n      alphadict[c] = [words[i]];\r\n    } else {\r\n      alphadict[c].push(words[i]);\r\n    }\r\n  }\r\n  return {dict:dict, alphadict:alphadict};\r\n}","// Calculates entropy.\r\nexport function entropy(length, charpool) {\r\n    return Math.log2(Math.pow(charpool, length));\r\n}\r\n\r\n// Calculates the number of combinations given a length and a charset.\r\nexport function combinations(length, charpool) {\r\n    return Math.pow(charpool, length);\r\n}\r\n\r\n// Returns the password type given a string.\r\nexport function pw_type(string){\r\n    // Matchs numbers.\r\n    let numeric = string.match(/[0-9]/g);\r\n    // Match lowercase.\r\n    let lowercase = string.match(/[a-z]/g);\r\n    // Match uppercase.\r\n    let uppercase = string.match(/[A-Z]/g);\r\n    // Match special characters.\r\n    let special = string.match(/[!@#\\$%\\^\\&*\\)\\(+=._-]/g);\r\n\r\n    // Array of regexes, charsets and amounts.\r\n    let regexes = [numeric, lowercase, uppercase, special];\r\n    let charsets = [\"Numeric\", \"Alphabetic Case-Insensitive\", \"Alphabetic Case-Sensitive\" , \"Alphanumeric Case-Insensitive\", \"Alphanumeric Case-Sensitive\", \"Alphanumeric + Special characters\"]\r\n    let amounts = [10, 26, 26, 8];\r\n\r\n    // Calculates the length of the charset\r\n    let boolarray = [];\r\n    let total = 0;\r\n    let charset = \"\";\r\n    for (let i = 0; i < amounts.length; i++){\r\n        if(regexes[i]){\r\n            boolarray.push(true);\r\n            total += amounts[i];\r\n        } else {\r\n            boolarray.push(false);\r\n        }\r\n    }\r\n\r\n    // Selects the charset.\r\n    if(special){\r\n        charset = charsets[charsets.length-1];\r\n    } else {\r\n        if(lowercase && uppercase && numeric){ \r\n            charset = charsets[charsets.length-2];\r\n        } else {\r\n            if(lowercase && numeric || uppercase && numeric){\r\n                charset = charsets[charsets.length-3];\r\n            } else {\r\n                if(lowercase && uppercase){\r\n                charset = charsets[charsets.length-4];\r\n                } else {\r\n                    if(lowercase || uppercase){\r\n                        charset = charsets[charsets.length-5];\r\n                    } else {\r\n                        charset = charsets[charsets.length-6];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {amount:total, charset:charset, types: regexes}\r\n}\r\n\r\n\r\nexport function pw_strength(entropy){\r\n    let strengths = [\"Very Weak\", \"Weak\", \"Reasonable\", \"Strong\", \"Very Strong\"]\r\n    if(entropy < 28){\r\n        return {strength:strengths[0], value:0};\r\n    } else if(entropy > 28 && entropy < 35){\r\n        return {strength:strengths[1], value:1};\r\n    } else if(entropy > 35 && entropy < 59){\r\n        return {strength:strengths[2], value:2};\r\n    } else if(entropy > 59){\r\n        return {strength:strengths[3], value:3};\r\n    } else {\r\n        return {strength:strengths[3], value:3};\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}